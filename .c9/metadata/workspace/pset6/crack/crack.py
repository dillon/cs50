{"filter":false,"title":"crack.py","tooltip":"/pset6/crack/crack.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":14,"column":8},"end":{"row":14,"column":10},"action":"insert","lines":["\"\""],"id":1333}],[{"start":{"row":14,"column":10},"end":{"row":14,"column":11},"action":"insert","lines":["\""],"id":1334}],[{"start":{"row":14,"column":10},"end":{"row":14,"column":11},"action":"remove","lines":["\""],"id":1335},{"start":{"row":14,"column":9},"end":{"row":14,"column":10},"action":"remove","lines":["\""]}],[{"start":{"row":14,"column":9},"end":{"row":14,"column":10},"action":"insert","lines":["e"],"id":1336},{"start":{"row":14,"column":10},"end":{"row":14,"column":11},"action":"insert","lines":["e"]},{"start":{"row":14,"column":11},"end":{"row":14,"column":12},"action":"insert","lines":["e"]},{"start":{"row":14,"column":12},"end":{"row":14,"column":13},"action":"insert","lines":["e"]},{"start":{"row":14,"column":13},"end":{"row":14,"column":14},"action":"insert","lines":["\""]}],[{"start":{"row":14,"column":14},"end":{"row":15,"column":0},"action":"insert","lines":["",""],"id":1337},{"start":{"row":15,"column":0},"end":{"row":15,"column":1},"action":"insert","lines":["w"]},{"start":{"row":15,"column":1},"end":{"row":15,"column":2},"action":"insert","lines":["o"]},{"start":{"row":15,"column":2},"end":{"row":15,"column":3},"action":"insert","lines":["r"]},{"start":{"row":15,"column":3},"end":{"row":15,"column":4},"action":"insert","lines":["d"]},{"start":{"row":15,"column":4},"end":{"row":15,"column":5},"action":"insert","lines":["5"]}],[{"start":{"row":15,"column":5},"end":{"row":15,"column":6},"action":"insert","lines":[" "],"id":1338},{"start":{"row":15,"column":6},"end":{"row":15,"column":7},"action":"insert","lines":["="]}],[{"start":{"row":15,"column":7},"end":{"row":15,"column":8},"action":"insert","lines":[" "],"id":1339}],[{"start":{"row":15,"column":8},"end":{"row":15,"column":10},"action":"insert","lines":["\"\""],"id":1340}],[{"start":{"row":15,"column":9},"end":{"row":15,"column":10},"action":"insert","lines":["5"],"id":1341},{"start":{"row":15,"column":10},"end":{"row":15,"column":11},"action":"insert","lines":["5"]}],[{"start":{"row":15,"column":10},"end":{"row":15,"column":11},"action":"remove","lines":["5"],"id":1342},{"start":{"row":15,"column":9},"end":{"row":15,"column":10},"action":"remove","lines":["5"]}],[{"start":{"row":15,"column":9},"end":{"row":15,"column":10},"action":"insert","lines":["e"],"id":1343},{"start":{"row":15,"column":10},"end":{"row":15,"column":11},"action":"insert","lines":["e"]},{"start":{"row":15,"column":11},"end":{"row":15,"column":12},"action":"insert","lines":["e"]},{"start":{"row":15,"column":12},"end":{"row":15,"column":13},"action":"insert","lines":["e"]},{"start":{"row":15,"column":13},"end":{"row":15,"column":14},"action":"insert","lines":["e"]}],[{"start":{"row":10,"column":0},"end":{"row":10,"column":9},"action":"remove","lines":["word = \"\""],"id":1344}],[{"start":{"row":9,"column":63},"end":{"row":10,"column":0},"action":"remove","lines":["",""],"id":1345}],[{"start":{"row":0,"column":0},"end":{"row":187,"column":10},"action":"remove","lines":["# cracks passwords","","# salt is first 2 characters of argv","import sys","import crypt","# command lines arguments are array at sys.argv","# remember that sys.argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word1 = \"e\"","word2 = \"ee\"","word3 = \"eee\"","word4 = \"eeee\"","word5 = \"eeeee\"","salt = \"\"","myArgument = \"\"","","def main():","    if len(sys.argv) == 2 and len(sys.argv[1]) == 13:","        # if there is one command line argument","        # and it has a length of 13","        myArgument = sys.argv[1]","        print(\"myArgument\")","        print(myArgument)","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        print(\"salt\")","        print(salt)","        print(\"cheat\")","        myValue = myFunction(word, salt)","        finalValue  = (\"\".join(myValue))","        print(finalValue)","","    else:","        # else remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","def myFunction(word, salt):","    word.append(\"e\")","    for c in myDict:","        word[0] = c","        tempword = \"\".join(word)","        if crypt.crypt(tempword, salt) == myArgument:","            return word","            break","    word.append(\"e\")","    for c in myDict:","        word[0] = c","        tempword = \"\".join(word)","        if crypt.crypt(tempword, salt) == myArgument:","            return word","            break","        for a in myDict:","            word[1] = a","            if word == ['N', 'O']:","                print(crypt.crypt(\"NO\", salt))","                print(myArgument)","                tempword = \"\".join(word)","                print(crypt.crypt(tempword, salt) == myArgument)","","            tempword = \"\".join(word)","            if crypt.crypt(tempword, salt) == myArgument:","                return word","                break","    word.append(\"e\")","    for c in myDict:","        word[0] = c","        tempword = \"\".join(word)","        if crypt.crypt(tempword, salt) == myArgument:","            return word","            break","        for a in myDict:","            word[1] = a","            tempword = \"\".join(word)","            if crypt.crypt(tempword, salt) == myArgument:","                return word","                break","            for r in myDict:","                word[2] = r","                tempword = \"\".join(word)","                if crypt.crypt(tempword, salt) == myArgument:","                    return word","                    break","    word.append(\"e\")","    for c in myDict:","        word[0] = c","        tempword = \"\".join(word)","        if crypt.crypt(tempword, salt) == myArgument:","            return word","            break","        for a in myDict:","            word[1] = a","            tempword = \"\".join(word)","            if crypt.crypt(tempword, salt) == myArgument:","                return word","                break","            for r in myDict:","                word[2] = r","                tempword = \"\".join(word)","                if crypt.crypt(tempword, salt) == myArgument:","                    return word","                    break","                for e in myDict:","                    word[3] = e","                    tempword = \"\".join(word)","                    if crypt.crypt(tempword, salt) == myArgument:","                        return word","                        break","    word.append(\"e\")","    for c in myDict:","        word[0] = c","        tempword = \"\".join(word)","        if crypt.crypt(tempword, salt) == myArgument:","            return word","            break","        for a in myDict:","            word[1] = a","            tempword = \"\".join(word)","            if crypt.crypt(tempword, salt) == myArgument:","                return word","                break","            for r in myDict:","                word[2] = r","                tempword = \"\".join(word)","                if crypt.crypt(tempword, salt) == myArgument:","                    return word","                    break","                for e in myDict:","                    word[3] = e","                    tempword = \"\".join(word)","                    if crypt.crypt(tempword, salt) == myArgument:","                        return word","                        break","                    for s in myDict:","                        word[4] = s","                        tempword = \"\".join(word)","                        if crypt.crypt(tempword, salt) == myArgument:","                            return word","                            break","    word.append(\"e\")","    for c in myDict:","        word[0] = c","        tempword = \"\".join(word)","        if crypt.crypt(tempword, salt) == myArgument:","            return word","            break","        for a in myDict:","            word[1] = a","            tempword = \"\".join(word)","            if crypt.crypt(tempword, salt) == myArgument:","                return word","                break","            for r in myDict:","                word[2] = r","                tempword = \"\".join(word)","                if crypt.crypt(tempword, salt) == myArgument:","                    return word","                    break","                for e in myDict:","                    word[3] = e","                    tempword = \"\".join(word)","                    if crypt.crypt(tempword, salt) == myArgument:","                        return word","                        break","                    for s in myDict:","                        word[4] = s","                        tempword = \"\".join(word)","                        if crypt.crypt(tempword, salt) == myArgument:","                            return word","                            break","                        for s in myDict:","                            word[5] = s","                            tempword = \"\".join(word)","                            print(tempword)","                            tempword = \"\".join(word)","                            if crypt.crypt(tempword, salt) == myArgument:","                                return word","                                break","    return \"Failed to find password\"","","","","","","if __name__ == \"__main__\":","    main()"],"id":1346},{"start":{"row":0,"column":0},"end":{"row":87,"column":10},"action":"insert","lines":["# cracks passwords","","# salt is first 2 characters of argv","import sys","import crypt","# command lines arguments are array at sys.argv","# remember that sys.argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word = \"\"","word2 = \"e\"","word3 = \"ee\"","word4 = \"eee\"","word5 = \"eeee\"","salt = \"\"","myArgument = \"\"","","def main():","    if len(sys.argv) == 2 and len(sys.argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = sys.argv[1]","        print(\"myArgument\")","        print(myArgument)","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        print(\"salt\")","        print(salt)","        print(\"cheat\")","        myValue = myFunction(word, salt)","        finalValue  = (\"\".join(myValue))","        print(finalValue)","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","def myFunction(word, salt):","    for c in myDict:","        word = c","        if crypt.crypt(word, salt) == myArgument:","            return word","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            if crypt.crypt(word2, salt) == myArgument:","                return word2","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                if crypt.crypt(word3, salt) == myArgument:","                    return word3","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    if crypt.crypt(word4, salt) == myArgument:","                        return word4","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    for s in myDict:","                        word5 = word4 + s","                        if crypt.crypt(word5, salt) == myArgument:","                            return word5","    return \"Failed to find password\"","","","","","","if __name__ == \"__main__\":","    main()"]}],[{"start":{"row":0,"column":0},"end":{"row":87,"column":10},"action":"remove","lines":["# cracks passwords","","# salt is first 2 characters of argv","import sys","import crypt","# command lines arguments are array at sys.argv","# remember that sys.argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word = \"\"","word2 = \"e\"","word3 = \"ee\"","word4 = \"eee\"","word5 = \"eeee\"","salt = \"\"","myArgument = \"\"","","def main():","    if len(sys.argv) == 2 and len(sys.argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = sys.argv[1]","        print(\"myArgument\")","        print(myArgument)","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        print(\"salt\")","        print(salt)","        print(\"cheat\")","        myValue = myFunction(word, salt)","        finalValue  = (\"\".join(myValue))","        print(finalValue)","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","def myFunction(word, salt):","    for c in myDict:","        word = c","        if crypt.crypt(word, salt) == myArgument:","            return word","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            if crypt.crypt(word2, salt) == myArgument:","                return word2","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                if crypt.crypt(word3, salt) == myArgument:","                    return word3","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    if crypt.crypt(word4, salt) == myArgument:","                        return word4","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    for s in myDict:","                        word5 = word4 + s","                        if crypt.crypt(word5, salt) == myArgument:","                            return word5","    return \"Failed to find password\"","","","","","","if __name__ == \"__main__\":","    main()"],"id":1347},{"start":{"row":0,"column":0},"end":{"row":92,"column":10},"action":"insert","lines":["# cracks passwords","","# salt is first 2 characters of argv","import sys","import crypt","# command lines arguments are array at sys.argv","# remember that sys.argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word = \"\"","word2 = \"e\"","word3 = \"ee\"","word4 = \"eee\"","word5 = \"eeee\"","salt = \"\"","myArgument = \"\"","","def main():","    if len(sys.argv) == 2 and len(sys.argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = sys.argv[1]","        print(\"myArgument\")","        print(myArgument)","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        print(\"salt\")","        print(salt)","        print(\"cheat\")","        myValue = myFunction(word, salt)","        finalValue  = (\"\".join(myValue))","        print(finalValue)","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","def myFunction(word, salt):","    for c in myDict:","        word = c","        print(word)","        if crypt.crypt(word, salt) == myArgument:","            return word","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            print(word2)","            if crypt.crypt(word2, salt) == myArgument:","                return word2","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                print(word3)","                if crypt.crypt(word3, salt) == myArgument:","                    return word3","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    print(word4)","                    if crypt.crypt(word4, salt) == myArgument:","                        return word4","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    for s in myDict:","                        word5 = word4 + s","                        print(word5)","                        if crypt.crypt(word5, salt) == myArgument:","                            return word5","    return \"Failed to find password\"","","","","","","if __name__ == \"__main__\":","    main()"]}],[{"start":{"row":0,"column":0},"end":{"row":92,"column":10},"action":"remove","lines":["# cracks passwords","","# salt is first 2 characters of argv","import sys","import crypt","# command lines arguments are array at sys.argv","# remember that sys.argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word = \"\"","word2 = \"e\"","word3 = \"ee\"","word4 = \"eee\"","word5 = \"eeee\"","salt = \"\"","myArgument = \"\"","","def main():","    if len(sys.argv) == 2 and len(sys.argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = sys.argv[1]","        print(\"myArgument\")","        print(myArgument)","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        print(\"salt\")","        print(salt)","        print(\"cheat\")","        myValue = myFunction(word, salt)","        finalValue  = (\"\".join(myValue))","        print(finalValue)","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","def myFunction(word, salt):","    for c in myDict:","        word = c","        print(word)","        if crypt.crypt(word, salt) == myArgument:","            return word","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            print(word2)","            if crypt.crypt(word2, salt) == myArgument:","                return word2","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                print(word3)","                if crypt.crypt(word3, salt) == myArgument:","                    return word3","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    print(word4)","                    if crypt.crypt(word4, salt) == myArgument:","                        return word4","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    for s in myDict:","                        word5 = word4 + s","                        print(word5)","                        if crypt.crypt(word5, salt) == myArgument:","                            return word5","    return \"Failed to find password\"","","","","","","if __name__ == \"__main__\":","    main()"],"id":1348},{"start":{"row":0,"column":0},"end":{"row":92,"column":10},"action":"insert","lines":["# cracks passwords","","# salt is first 2 characters of argv","import sys","import crypt","# command lines arguments are array at sys.argv","# remember that sys.argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word = \"\"","word2 = \"e\"","word3 = \"ee\"","word4 = \"eee\"","word5 = \"eeee\"","salt = \"\"","myArgument = \"\"","","def main():","    if len(sys.argv) == 2 and len(sys.argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = sys.argv[1]","        print(\"myArgument\")","        print(myArgument)","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        print(\"salt\")","        print(salt)","        print(\"cheat\")","        myValue = myFunction(word, salt)","        finalValue  = (\"\".join(myValue))","        print(finalValue)","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","def myFunction(word, salt):","    for c in myDict:","        word = c","        print(word)","        if crypt.crypt(word, salt) == myArgument:","            return word","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            print(word2)","            if crypt.crypt(word2, salt) == myArgument:","                return word2","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                # print(word3)","                if crypt.crypt(word3, salt) == myArgument:","                    return word3","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    # print(word4)","                    if crypt.crypt(word4, salt) == myArgument:","                        return word4","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    for s in myDict:","                        word5 = word4 + s","                        # print(word5)","                        if crypt.crypt(word5, salt) == myArgument:","                            return word5","    return \"Failed to find password\"","","","","","","if __name__ == \"__main__\":","    main()"]}],[{"start":{"row":9,"column":23},"end":{"row":9,"column":24},"action":"insert","lines":[" "],"id":1350},{"start":{"row":9,"column":24},"end":{"row":9,"column":25},"action":"insert","lines":["#"]}],[{"start":{"row":9,"column":25},"end":{"row":9,"column":26},"action":"insert","lines":[" "],"id":1351}],[{"start":{"row":9,"column":23},"end":{"row":9,"column":24},"action":"remove","lines":[" "],"id":1352}],[{"start":{"row":9,"column":23},"end":{"row":10,"column":0},"action":"insert","lines":["",""],"id":1353}],[{"start":{"row":9,"column":23},"end":{"row":9,"column":24},"action":"insert","lines":["\""],"id":1354}],[{"start":{"row":50,"column":24},"end":{"row":51,"column":0},"action":"insert","lines":["",""],"id":1355},{"start":{"row":51,"column":0},"end":{"row":51,"column":12},"action":"insert","lines":["            "]},{"start":{"row":51,"column":12},"end":{"row":51,"column":13},"action":"insert","lines":["p"]},{"start":{"row":51,"column":13},"end":{"row":51,"column":14},"action":"insert","lines":["r"]},{"start":{"row":51,"column":14},"end":{"row":51,"column":15},"action":"insert","lines":["i"]},{"start":{"row":51,"column":15},"end":{"row":51,"column":16},"action":"insert","lines":["n"]},{"start":{"row":51,"column":16},"end":{"row":51,"column":17},"action":"insert","lines":["t"]}],[{"start":{"row":51,"column":17},"end":{"row":51,"column":19},"action":"insert","lines":["()"],"id":1356}],[{"start":{"row":51,"column":18},"end":{"row":51,"column":19},"action":"insert","lines":["c"],"id":1357},{"start":{"row":51,"column":19},"end":{"row":51,"column":20},"action":"insert","lines":["r"]},{"start":{"row":51,"column":20},"end":{"row":51,"column":21},"action":"insert","lines":["y"]},{"start":{"row":51,"column":21},"end":{"row":51,"column":22},"action":"insert","lines":["p"]},{"start":{"row":51,"column":22},"end":{"row":51,"column":23},"action":"insert","lines":["t"]},{"start":{"row":51,"column":23},"end":{"row":51,"column":24},"action":"insert","lines":["."]},{"start":{"row":51,"column":24},"end":{"row":51,"column":25},"action":"insert","lines":["c"]},{"start":{"row":51,"column":25},"end":{"row":51,"column":26},"action":"insert","lines":["r"]},{"start":{"row":51,"column":26},"end":{"row":51,"column":27},"action":"insert","lines":["y"]},{"start":{"row":51,"column":27},"end":{"row":51,"column":28},"action":"insert","lines":["p"]},{"start":{"row":51,"column":28},"end":{"row":51,"column":29},"action":"insert","lines":["t"]}],[{"start":{"row":51,"column":29},"end":{"row":51,"column":31},"action":"insert","lines":["()"],"id":1358}],[{"start":{"row":51,"column":30},"end":{"row":51,"column":31},"action":"insert","lines":["w"],"id":1359},{"start":{"row":51,"column":31},"end":{"row":51,"column":32},"action":"insert","lines":["o"]},{"start":{"row":51,"column":32},"end":{"row":51,"column":33},"action":"insert","lines":["r"]},{"start":{"row":51,"column":33},"end":{"row":51,"column":34},"action":"insert","lines":["d"]},{"start":{"row":51,"column":34},"end":{"row":51,"column":35},"action":"insert","lines":["2"]},{"start":{"row":51,"column":35},"end":{"row":51,"column":36},"action":"insert","lines":[","]}],[{"start":{"row":51,"column":36},"end":{"row":51,"column":37},"action":"insert","lines":[" "],"id":1360},{"start":{"row":51,"column":37},"end":{"row":51,"column":38},"action":"insert","lines":["s"]},{"start":{"row":51,"column":38},"end":{"row":51,"column":39},"action":"insert","lines":["a"]},{"start":{"row":51,"column":39},"end":{"row":51,"column":40},"action":"insert","lines":["l"]},{"start":{"row":51,"column":40},"end":{"row":51,"column":41},"action":"insert","lines":["t"]}],[{"start":{"row":51,"column":43},"end":{"row":52,"column":0},"action":"insert","lines":["",""],"id":1361},{"start":{"row":52,"column":0},"end":{"row":52,"column":12},"action":"insert","lines":["            "]},{"start":{"row":52,"column":12},"end":{"row":52,"column":13},"action":"insert","lines":["p"]},{"start":{"row":52,"column":13},"end":{"row":52,"column":14},"action":"insert","lines":["r"]},{"start":{"row":52,"column":14},"end":{"row":52,"column":15},"action":"insert","lines":["i"]},{"start":{"row":52,"column":15},"end":{"row":52,"column":16},"action":"insert","lines":["n"]},{"start":{"row":52,"column":16},"end":{"row":52,"column":17},"action":"insert","lines":["t"]}],[{"start":{"row":52,"column":17},"end":{"row":52,"column":19},"action":"insert","lines":["()"],"id":1362}],[{"start":{"row":52,"column":18},"end":{"row":52,"column":19},"action":"insert","lines":["m"],"id":1363},{"start":{"row":52,"column":19},"end":{"row":52,"column":20},"action":"insert","lines":["y"]},{"start":{"row":52,"column":20},"end":{"row":52,"column":21},"action":"insert","lines":["a"]}],[{"start":{"row":52,"column":20},"end":{"row":52,"column":21},"action":"remove","lines":["a"],"id":1364}],[{"start":{"row":52,"column":20},"end":{"row":52,"column":21},"action":"insert","lines":["A"],"id":1365},{"start":{"row":52,"column":21},"end":{"row":52,"column":22},"action":"insert","lines":["r"]},{"start":{"row":52,"column":22},"end":{"row":52,"column":23},"action":"insert","lines":["g"]},{"start":{"row":52,"column":23},"end":{"row":52,"column":24},"action":"insert","lines":["u"]},{"start":{"row":52,"column":24},"end":{"row":52,"column":25},"action":"insert","lines":["m"]},{"start":{"row":52,"column":25},"end":{"row":52,"column":26},"action":"insert","lines":["e"]},{"start":{"row":52,"column":26},"end":{"row":52,"column":27},"action":"insert","lines":["n"]},{"start":{"row":52,"column":27},"end":{"row":52,"column":28},"action":"insert","lines":["t"]}],[{"start":{"row":52,"column":29},"end":{"row":53,"column":0},"action":"insert","lines":["",""],"id":1366},{"start":{"row":53,"column":0},"end":{"row":53,"column":12},"action":"insert","lines":["            "]},{"start":{"row":53,"column":12},"end":{"row":53,"column":13},"action":"insert","lines":["p"]},{"start":{"row":53,"column":13},"end":{"row":53,"column":14},"action":"insert","lines":["r"]},{"start":{"row":53,"column":14},"end":{"row":53,"column":15},"action":"insert","lines":["i"]},{"start":{"row":53,"column":15},"end":{"row":53,"column":16},"action":"insert","lines":["n"]},{"start":{"row":53,"column":16},"end":{"row":53,"column":17},"action":"insert","lines":["t"]}],[{"start":{"row":53,"column":17},"end":{"row":53,"column":19},"action":"insert","lines":["()"],"id":1367}],[{"start":{"row":53,"column":18},"end":{"row":53,"column":19},"action":"insert","lines":["c"],"id":1368},{"start":{"row":53,"column":19},"end":{"row":53,"column":20},"action":"insert","lines":["r"]},{"start":{"row":53,"column":20},"end":{"row":53,"column":21},"action":"insert","lines":["y"]},{"start":{"row":53,"column":21},"end":{"row":53,"column":22},"action":"insert","lines":["p"]},{"start":{"row":53,"column":22},"end":{"row":53,"column":23},"action":"insert","lines":["t"]},{"start":{"row":53,"column":23},"end":{"row":53,"column":24},"action":"insert","lines":["."]},{"start":{"row":53,"column":24},"end":{"row":53,"column":25},"action":"insert","lines":["c"]},{"start":{"row":53,"column":25},"end":{"row":53,"column":26},"action":"insert","lines":["r"]},{"start":{"row":53,"column":26},"end":{"row":53,"column":27},"action":"insert","lines":["y"]},{"start":{"row":53,"column":27},"end":{"row":53,"column":28},"action":"insert","lines":["p"]},{"start":{"row":53,"column":28},"end":{"row":53,"column":29},"action":"insert","lines":["t"]}],[{"start":{"row":53,"column":29},"end":{"row":53,"column":31},"action":"insert","lines":["()"],"id":1369}],[{"start":{"row":53,"column":30},"end":{"row":53,"column":31},"action":"insert","lines":["w"],"id":1370},{"start":{"row":53,"column":31},"end":{"row":53,"column":32},"action":"insert","lines":["o"]},{"start":{"row":53,"column":32},"end":{"row":53,"column":33},"action":"insert","lines":["r"]},{"start":{"row":53,"column":33},"end":{"row":53,"column":34},"action":"insert","lines":["d"]},{"start":{"row":53,"column":34},"end":{"row":53,"column":35},"action":"insert","lines":["2"]}],[{"start":{"row":53,"column":35},"end":{"row":53,"column":36},"action":"insert","lines":[","],"id":1371}],[{"start":{"row":53,"column":36},"end":{"row":53,"column":37},"action":"insert","lines":[" "],"id":1372},{"start":{"row":53,"column":37},"end":{"row":53,"column":38},"action":"insert","lines":["s"]},{"start":{"row":53,"column":38},"end":{"row":53,"column":39},"action":"insert","lines":["a"]},{"start":{"row":53,"column":39},"end":{"row":53,"column":40},"action":"insert","lines":["l"]},{"start":{"row":53,"column":40},"end":{"row":53,"column":41},"action":"insert","lines":["t"]},{"start":{"row":53,"column":41},"end":{"row":53,"column":42},"action":"insert","lines":[")"]},{"start":{"row":53,"column":42},"end":{"row":53,"column":43},"action":"insert","lines":[","]}],[{"start":{"row":53,"column":43},"end":{"row":53,"column":44},"action":"insert","lines":[" "],"id":1373},{"start":{"row":53,"column":44},"end":{"row":53,"column":45},"action":"insert","lines":["m"]},{"start":{"row":53,"column":45},"end":{"row":53,"column":46},"action":"insert","lines":["y"]}],[{"start":{"row":53,"column":46},"end":{"row":53,"column":47},"action":"remove","lines":[")"],"id":1374}],[{"start":{"row":53,"column":46},"end":{"row":53,"column":47},"action":"insert","lines":["A"],"id":1375},{"start":{"row":53,"column":47},"end":{"row":53,"column":48},"action":"insert","lines":["r"]},{"start":{"row":53,"column":48},"end":{"row":53,"column":49},"action":"insert","lines":["g"]},{"start":{"row":53,"column":49},"end":{"row":53,"column":50},"action":"insert","lines":["u"]},{"start":{"row":53,"column":50},"end":{"row":53,"column":51},"action":"insert","lines":["m"]},{"start":{"row":53,"column":51},"end":{"row":53,"column":52},"action":"insert","lines":["e"]},{"start":{"row":53,"column":52},"end":{"row":53,"column":53},"action":"insert","lines":["n"]},{"start":{"row":53,"column":53},"end":{"row":53,"column":54},"action":"insert","lines":["t"]}],[{"start":{"row":53,"column":43},"end":{"row":53,"column":44},"action":"remove","lines":[" "],"id":1376},{"start":{"row":53,"column":42},"end":{"row":53,"column":43},"action":"remove","lines":[","]}],[{"start":{"row":53,"column":42},"end":{"row":53,"column":43},"action":"insert","lines":[" "],"id":1377},{"start":{"row":53,"column":43},"end":{"row":53,"column":44},"action":"insert","lines":["="]},{"start":{"row":53,"column":44},"end":{"row":53,"column":45},"action":"insert","lines":["="]}],[{"start":{"row":53,"column":45},"end":{"row":53,"column":46},"action":"insert","lines":[" "],"id":1378}],[{"start":{"row":53,"column":12},"end":{"row":53,"column":57},"action":"remove","lines":["print(crypt.crypt(word2, salt) == myArgument)"],"id":1379}],[{"start":{"row":53,"column":0},"end":{"row":53,"column":12},"action":"remove","lines":["            "],"id":1380}],[{"start":{"row":52,"column":29},"end":{"row":53,"column":0},"action":"remove","lines":["",""],"id":1381}],[{"start":{"row":51,"column":0},"end":{"row":52,"column":0},"action":"remove","lines":["            print(crypt.crypt(word2, salt))",""],"id":1382}],[{"start":{"row":50,"column":0},"end":{"row":51,"column":0},"action":"remove","lines":["            print(word2)",""],"id":1383}],[{"start":{"row":23,"column":31},"end":{"row":23,"column":32},"action":"remove","lines":["]"],"id":1384},{"start":{"row":23,"column":30},"end":{"row":23,"column":31},"action":"remove","lines":["1"]},{"start":{"row":23,"column":29},"end":{"row":23,"column":30},"action":"remove","lines":["["]}],[{"start":{"row":23,"column":29},"end":{"row":23,"column":31},"action":"insert","lines":["[]"],"id":1385}],[{"start":{"row":23,"column":30},"end":{"row":23,"column":31},"action":"insert","lines":["1"],"id":1386}],[{"start":{"row":40,"column":25},"end":{"row":40,"column":26},"action":"insert","lines":[","],"id":1387}],[{"start":{"row":40,"column":26},"end":{"row":40,"column":27},"action":"insert","lines":[" "],"id":1388},{"start":{"row":40,"column":27},"end":{"row":40,"column":28},"action":"insert","lines":["m"]},{"start":{"row":40,"column":28},"end":{"row":40,"column":29},"action":"insert","lines":["y"]},{"start":{"row":40,"column":29},"end":{"row":40,"column":30},"action":"insert","lines":["A"]},{"start":{"row":40,"column":30},"end":{"row":40,"column":31},"action":"insert","lines":["r"]},{"start":{"row":40,"column":31},"end":{"row":40,"column":32},"action":"insert","lines":["g"]},{"start":{"row":40,"column":32},"end":{"row":40,"column":33},"action":"insert","lines":["u"]},{"start":{"row":40,"column":33},"end":{"row":40,"column":34},"action":"insert","lines":["m"]},{"start":{"row":40,"column":34},"end":{"row":40,"column":35},"action":"insert","lines":["e"]},{"start":{"row":40,"column":35},"end":{"row":40,"column":36},"action":"insert","lines":["n"]},{"start":{"row":40,"column":36},"end":{"row":40,"column":37},"action":"insert","lines":["t"]}],[{"start":{"row":31,"column":39},"end":{"row":31,"column":40},"action":"insert","lines":[","],"id":1389}],[{"start":{"row":31,"column":40},"end":{"row":31,"column":41},"action":"insert","lines":[" "],"id":1390},{"start":{"row":31,"column":41},"end":{"row":31,"column":42},"action":"insert","lines":["m"]},{"start":{"row":31,"column":42},"end":{"row":31,"column":43},"action":"insert","lines":["y"]},{"start":{"row":31,"column":43},"end":{"row":31,"column":44},"action":"insert","lines":["A"]},{"start":{"row":31,"column":44},"end":{"row":31,"column":45},"action":"insert","lines":["r"]},{"start":{"row":31,"column":45},"end":{"row":31,"column":46},"action":"insert","lines":["g"]},{"start":{"row":31,"column":46},"end":{"row":31,"column":47},"action":"insert","lines":["u"]},{"start":{"row":31,"column":47},"end":{"row":31,"column":48},"action":"insert","lines":["m"]},{"start":{"row":31,"column":48},"end":{"row":31,"column":49},"action":"insert","lines":["e"]},{"start":{"row":31,"column":49},"end":{"row":31,"column":50},"action":"insert","lines":["n"]},{"start":{"row":31,"column":50},"end":{"row":31,"column":51},"action":"insert","lines":["t"]}],[{"start":{"row":10,"column":1},"end":{"row":10,"column":2},"action":"remove","lines":[" "],"id":1391},{"start":{"row":10,"column":0},"end":{"row":10,"column":1},"action":"remove","lines":["#"]},{"start":{"row":9,"column":24},"end":{"row":10,"column":0},"action":"remove","lines":["",""]},{"start":{"row":9,"column":23},"end":{"row":9,"column":24},"action":"remove","lines":["\""]}],[{"start":{"row":0,"column":0},"end":{"row":92,"column":10},"action":"remove","lines":["# cracks passwords","","# salt is first 2 characters of argv","import sys","import crypt","# command lines arguments are array at sys.argv","# remember that sys.argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word = \"\"","word2 = \"e\"","word3 = \"ee\"","word4 = \"eee\"","word5 = \"eeee\"","salt = \"\"","myArgument = \"\"","","def main():","    if len(sys.argv) == 2 and len(sys.argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = sys.argv[1]","        print(\"myArgument\")","        print(myArgument)","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        print(\"salt\")","        print(salt)","        print(\"cheat\")","        myValue = myFunction(word, salt, myArgument)","        finalValue  = (\"\".join(myValue))","        print(finalValue)","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","def myFunction(word, salt, myArgument):","    for c in myDict:","        word = c","        print(word)","        if crypt.crypt(word, salt) == myArgument:","            return word","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            print(myArgument)","            if crypt.crypt(word2, salt) == myArgument:","                return word2","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                # print(word3)","                if crypt.crypt(word3, salt) == myArgument:","                    return word3","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    # print(word4)","                    if crypt.crypt(word4, salt) == myArgument:","                        return word4","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    for s in myDict:","                        word5 = word4 + s","                        # print(word5)","                        if crypt.crypt(word5, salt) == myArgument:","                            return word5","    return \"Failed to find password\"","","","","","","if __name__ == \"__main__\":","    main()"],"id":1392},{"start":{"row":0,"column":0},"end":{"row":82,"column":10},"action":"insert","lines":["# cracks passwords","","# salt is first 2 characters of argv","import sys","import crypt","# command lines arguments are array at sys.argv","# remember that sys.argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word = \"\"","word2 = \"e\"","word3 = \"ee\"","word4 = \"eee\"","word5 = \"eeee\"","salt = \"\"","myArgument = \"\"","","def main():","    if len(sys.argv) == 2 and len(sys.argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = sys.argv[1]","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        myValue = myFunction(word, salt, myArgument)","        finalValue  = (\"\".join(myValue))","        print(finalValue)","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","def myFunction(word, salt, myArgument):","    for c in myDict:","        word = c","        if crypt.crypt(word, salt) == myArgument:","            return word","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            if crypt.crypt(word2, salt) == myArgument:","                return word2","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                if crypt.crypt(word3, salt) == myArgument:","                    return word3","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    if crypt.crypt(word4, salt) == myArgument:","                        return word4","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    for s in myDict:","                        word5 = word4 + s","                        if crypt.crypt(word5, salt) == myArgument:","                            return word5","    return \"Failed to find password\"","","","","","","if __name__ == \"__main__\":","    main()"]}],[{"start":{"row":64,"column":16},"end":{"row":65,"column":0},"action":"insert","lines":["",""],"id":1394},{"start":{"row":65,"column":0},"end":{"row":65,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":65,"column":8},"end":{"row":67,"column":0},"action":"insert","lines":["        if crypt.crypt(word, salt) == myArgument:","            return word",""],"id":1395}],[{"start":{"row":66,"column":23},"end":{"row":67,"column":0},"action":"remove","lines":["",""],"id":1396}],[{"start":{"row":65,"column":0},"end":{"row":65,"column":4},"action":"remove","lines":["    "],"id":1397}],[{"start":{"row":65,"column":0},"end":{"row":65,"column":4},"action":"remove","lines":["    "],"id":1398}],[{"start":{"row":68,"column":28},"end":{"row":69,"column":0},"action":"insert","lines":["",""],"id":1399},{"start":{"row":69,"column":0},"end":{"row":69,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":69,"column":12},"end":{"row":70,"column":28},"action":"insert","lines":["if crypt.crypt(word2, salt) == myArgument:","                return word2"],"id":1400}],[{"start":{"row":72,"column":33},"end":{"row":73,"column":0},"action":"insert","lines":["",""],"id":1401},{"start":{"row":73,"column":0},"end":{"row":73,"column":16},"action":"insert","lines":["                "]}],[{"start":{"row":73,"column":16},"end":{"row":74,"column":32},"action":"insert","lines":["if crypt.crypt(word3, salt) == myArgument:","                    return word3"],"id":1402}],[{"start":{"row":76,"column":37},"end":{"row":77,"column":0},"action":"insert","lines":["",""],"id":1403},{"start":{"row":77,"column":0},"end":{"row":77,"column":20},"action":"insert","lines":["                    "]}],[{"start":{"row":0,"column":0},"end":{"row":89,"column":10},"action":"remove","lines":["# cracks passwords","","# salt is first 2 characters of argv","import sys","import crypt","# command lines arguments are array at sys.argv","# remember that sys.argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word = \"\"","word2 = \"e\"","word3 = \"ee\"","word4 = \"eee\"","word5 = \"eeee\"","salt = \"\"","myArgument = \"\"","","def main():","    if len(sys.argv) == 2 and len(sys.argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = sys.argv[1]","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        myValue = myFunction(word, salt, myArgument)","        finalValue  = (\"\".join(myValue))","        print(finalValue)","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","def myFunction(word, salt, myArgument):","    for c in myDict:","        word = c","        if crypt.crypt(word, salt) == myArgument:","            return word","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            if crypt.crypt(word2, salt) == myArgument:","                return word2","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                if crypt.crypt(word3, salt) == myArgument:","                    return word3","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    if crypt.crypt(word4, salt) == myArgument:","                        return word4","    for c in myDict:","        word = c","        if crypt.crypt(word, salt) == myArgument:","            return word","        for a in myDict:","            word2 = word + a","            if crypt.crypt(word2, salt) == myArgument:","                return word2","            for r in myDict:","                word3 = word2 + r","                if crypt.crypt(word3, salt) == myArgument:","                    return word3","                for e in myDict:","                    word4 = word3 + e","                    ","                    for s in myDict:","                        word5 = word4 + s","                        if crypt.crypt(word5, salt) == myArgument:","                            return word5","    return \"Failed to find password\"","","","","","","if __name__ == \"__main__\":","    main()"],"id":1408},{"start":{"row":0,"column":0},"end":{"row":82,"column":10},"action":"insert","lines":["# cracks passwords","","# salt is first 2 characters of argv","import sys","import crypt","# command lines arguments are array at sys.argv","# remember that sys.argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word = \"\"","word2 = \"e\"","word3 = \"ee\"","word4 = \"eee\"","word5 = \"eeee\"","salt = \"\"","myArgument = \"\"","","def main():","    if len(sys.argv) == 2 and len(sys.argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = sys.argv[1]","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        myValue = myFunction(word, salt, myArgument)","        finalValue  = (\"\".join(myValue))","        print(finalValue)","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","def myFunction(word, salt, myArgument):","    for c in myDict:","        word = c","        if crypt.crypt(word, salt) == myArgument:","            return word","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            if crypt.crypt(word2, salt) == myArgument:","                return word2","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                if crypt.crypt(word3, salt) == myArgument:","                    return word3","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    if crypt.crypt(word4, salt) == myArgument:","                        return word4","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    for s in myDict:","                        word5 = word4 + s","                        if crypt.crypt(word5, salt) == myArgument:","                            return word5","    return \"Failed to find password\"","","","","","","if __name__ == \"__main__\":","    main()"]}],[{"start":{"row":17,"column":0},"end":{"row":18,"column":0},"action":"insert","lines":["",""],"id":1409}],[{"start":{"row":27,"column":19},"end":{"row":27,"column":20},"action":"remove","lines":[" "],"id":1410}],[{"start":{"row":34,"column":0},"end":{"row":35,"column":0},"action":"insert","lines":["",""],"id":1411}],[{"start":{"row":80,"column":0},"end":{"row":81,"column":0},"action":"remove","lines":["",""],"id":1412},{"start":{"row":79,"column":0},"end":{"row":80,"column":0},"action":"remove","lines":["",""]},{"start":{"row":78,"column":0},"end":{"row":79,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":66,"column":8},"end":{"row":67,"column":0},"action":"insert","lines":["",""],"id":1463},{"start":{"row":67,"column":0},"end":{"row":67,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":66,"column":8},"end":{"row":66,"column":9},"action":"insert","lines":["p"],"id":1464},{"start":{"row":66,"column":9},"end":{"row":66,"column":10},"action":"insert","lines":["r"]},{"start":{"row":66,"column":10},"end":{"row":66,"column":11},"action":"insert","lines":["i"]},{"start":{"row":66,"column":11},"end":{"row":66,"column":12},"action":"insert","lines":["n"]},{"start":{"row":66,"column":12},"end":{"row":66,"column":13},"action":"insert","lines":["t"]}],[{"start":{"row":66,"column":13},"end":{"row":66,"column":15},"action":"insert","lines":["()"],"id":1465}],[{"start":{"row":66,"column":14},"end":{"row":66,"column":15},"action":"insert","lines":["C"],"id":1466},{"start":{"row":66,"column":15},"end":{"row":66,"column":16},"action":"insert","lines":["h"]},{"start":{"row":66,"column":16},"end":{"row":66,"column":17},"action":"insert","lines":["e"]},{"start":{"row":66,"column":17},"end":{"row":66,"column":18},"action":"insert","lines":["c"]},{"start":{"row":66,"column":18},"end":{"row":66,"column":19},"action":"insert","lines":["k"]},{"start":{"row":66,"column":19},"end":{"row":66,"column":20},"action":"insert","lines":["e"]},{"start":{"row":66,"column":20},"end":{"row":66,"column":21},"action":"insert","lines":["r"]},{"start":{"row":66,"column":21},"end":{"row":66,"column":22},"action":"insert","lines":["\""]}],[{"start":{"row":66,"column":14},"end":{"row":66,"column":15},"action":"insert","lines":["\""],"id":1467}],[{"start":{"row":66,"column":15},"end":{"row":66,"column":16},"action":"remove","lines":["C"],"id":1468}],[{"start":{"row":66,"column":15},"end":{"row":66,"column":16},"action":"insert","lines":["c"],"id":1469}],[{"start":{"row":66,"column":22},"end":{"row":66,"column":23},"action":"insert","lines":[" "],"id":1470},{"start":{"row":66,"column":23},"end":{"row":66,"column":24},"action":"insert","lines":["5"]}],[{"start":{"row":56,"column":16},"end":{"row":57,"column":0},"action":"insert","lines":["",""],"id":1471},{"start":{"row":57,"column":0},"end":{"row":57,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":57,"column":8},"end":{"row":57,"column":21},"action":"insert","lines":["50GApilQSG3E2"],"id":1472}],[{"start":{"row":57,"column":8},"end":{"row":57,"column":21},"action":"remove","lines":["50GApilQSG3E2"],"id":1473}],[{"start":{"row":57,"column":0},"end":{"row":57,"column":8},"action":"remove","lines":["        "],"id":1474}],[{"start":{"row":56,"column":16},"end":{"row":57,"column":0},"action":"remove","lines":["",""],"id":1475}],[{"start":{"row":55,"column":20},"end":{"row":56,"column":0},"action":"insert","lines":["",""],"id":1476},{"start":{"row":56,"column":0},"end":{"row":56,"column":8},"action":"insert","lines":["        "]},{"start":{"row":56,"column":8},"end":{"row":56,"column":9},"action":"insert","lines":["p"]},{"start":{"row":56,"column":9},"end":{"row":56,"column":10},"action":"insert","lines":["r"]},{"start":{"row":56,"column":10},"end":{"row":56,"column":11},"action":"insert","lines":["i"]},{"start":{"row":56,"column":11},"end":{"row":56,"column":12},"action":"insert","lines":["n"]},{"start":{"row":56,"column":12},"end":{"row":56,"column":13},"action":"insert","lines":["t"]}],[{"start":{"row":56,"column":13},"end":{"row":56,"column":15},"action":"insert","lines":["()"],"id":1477}],[{"start":{"row":56,"column":14},"end":{"row":56,"column":15},"action":"insert","lines":["c"],"id":1478},{"start":{"row":56,"column":15},"end":{"row":56,"column":16},"action":"insert","lines":["h"]},{"start":{"row":56,"column":16},"end":{"row":56,"column":17},"action":"insert","lines":["e"]}],[{"start":{"row":56,"column":16},"end":{"row":56,"column":17},"action":"remove","lines":["e"],"id":1479},{"start":{"row":56,"column":15},"end":{"row":56,"column":16},"action":"remove","lines":["h"]},{"start":{"row":56,"column":14},"end":{"row":56,"column":15},"action":"remove","lines":["c"]}],[{"start":{"row":56,"column":14},"end":{"row":56,"column":16},"action":"insert","lines":["\"\""],"id":1480}],[{"start":{"row":56,"column":15},"end":{"row":56,"column":16},"action":"insert","lines":["c"],"id":1481},{"start":{"row":56,"column":16},"end":{"row":56,"column":17},"action":"insert","lines":["h"]},{"start":{"row":56,"column":17},"end":{"row":56,"column":18},"action":"insert","lines":["e"]},{"start":{"row":56,"column":18},"end":{"row":56,"column":19},"action":"insert","lines":["c"]},{"start":{"row":56,"column":19},"end":{"row":56,"column":20},"action":"insert","lines":["k"]},{"start":{"row":56,"column":20},"end":{"row":56,"column":21},"action":"insert","lines":["e"]},{"start":{"row":56,"column":21},"end":{"row":56,"column":22},"action":"insert","lines":["r"]},{"start":{"row":56,"column":22},"end":{"row":56,"column":23},"action":"insert","lines":["5"]}],[{"start":{"row":56,"column":22},"end":{"row":56,"column":23},"action":"remove","lines":["5"],"id":1482}],[{"start":{"row":56,"column":22},"end":{"row":56,"column":23},"action":"insert","lines":["4"],"id":1483}],[{"start":{"row":56,"column":22},"end":{"row":56,"column":23},"action":"remove","lines":["4"],"id":1484}],[{"start":{"row":56,"column":22},"end":{"row":56,"column":23},"action":"insert","lines":[" "],"id":1485},{"start":{"row":56,"column":23},"end":{"row":56,"column":24},"action":"insert","lines":["4"]}],[{"start":{"row":56,"column":0},"end":{"row":57,"column":0},"action":"remove","lines":["        print(\"checker 4\")",""],"id":1486}],[{"start":{"row":66,"column":0},"end":{"row":67,"column":0},"action":"remove","lines":["        print(\"checker 5\")",""],"id":1487}],[{"start":{"row":0,"column":0},"end":{"row":81,"column":10},"action":"remove","lines":["# cracks passwords","","# salt is first 2 characters of argv","import sys","import crypt","# command lines arguments are array at sys.argv","# remember that sys.argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word = \"\"","word2 = \"e\"","word3 = \"ee\"","word4 = \"eee\"","word5 = \"eeee\"","salt = \"\"","myArgument = \"\"","","","def main():","    if len(sys.argv) == 2 and len(sys.argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = sys.argv[1]","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        myValue = myFunction(word, salt, myArgument)","        finalValue = (\"\".join(myValue))","        print(finalValue)","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","","def myFunction(word, salt, myArgument):","    for c in myDict:","        word = c","        if crypt.crypt(word, salt) == myArgument:","            return word","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            if crypt.crypt(word2, salt) == myArgument:","                return word2","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                if crypt.crypt(word3, salt) == myArgument:","                    return word3","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    if crypt.crypt(word4, salt) == myArgument:","                        return word4","    for c in myDict:","        word = c","        for a in myDict:","            word2 = word + a","            for r in myDict:","                word3 = word2 + r","                for e in myDict:","                    word4 = word3 + e","                    for s in myDict:","                        word5 = word4 + s","                        if crypt.crypt(word5, salt) == myArgument:","                            return word5","    return \"Failed to find password\"","","","if __name__ == \"__main__\":","    main()"],"id":1488},{"start":{"row":0,"column":0},"end":{"row":64,"column":10},"action":"insert","lines":["# cracks passwords","","# salt is first 2 characters of argv","from sys import argv","from crypt import crypt","# command lines arguments are array at argv","# remember that argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word = \"\"","word2 = \"e\"","word3 = \"ee\"","word4 = \"eee\"","word5 = \"eeee\"","salt = \"\"","myArgument = \"\"","","","def main():","    if len(argv) == 2 and len(argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = argv[1]","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        print(myFunction(word, salt, myArgument))","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","","def myFunction(word, salt, myArgument):","    for c in myDict:","        if crypt(c, salt) == myArgument:","            return c","    for c in myDict:","        for a in myDict:","            if crypt(c + a, salt) == myArgument:","                return c + a","    for c in myDict:","        for a in myDict:","            for r in myDict:","                if crypt(c + a + r, salt) == myArgument:","                    return c + a + r","    for c in myDict:","        for a in myDict:","            for r in myDict:","                for e in myDict:","                    if crypt(c + a + r + e, salt) == myArgument:","                        return c + a + r + e","    for c in myDict:","        for a in myDict:","            for r in myDict:","                for e in myDict:","                    for s in myDict:","                        if crypt(c + a + r + e + s, salt) == myArgument:","                            return c + a + r + e + s","    return \"Failed to find password\"","","","if __name__ == \"__main__\":","    main()"]}],[{"start":{"row":0,"column":0},"end":{"row":64,"column":10},"action":"remove","lines":["# cracks passwords","","# salt is first 2 characters of argv","from sys import argv","from crypt import crypt","# command lines arguments are array at argv","# remember that argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","word = \"\"","word2 = \"e\"","word3 = \"ee\"","word4 = \"eee\"","word5 = \"eeee\"","salt = \"\"","myArgument = \"\"","","","def main():","    if len(argv) == 2 and len(argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = argv[1]","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        print(myFunction(word, salt, myArgument))","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","","def myFunction(word, salt, myArgument):","    for c in myDict:","        if crypt(c, salt) == myArgument:","            return c","    for c in myDict:","        for a in myDict:","            if crypt(c + a, salt) == myArgument:","                return c + a","    for c in myDict:","        for a in myDict:","            for r in myDict:","                if crypt(c + a + r, salt) == myArgument:","                    return c + a + r","    for c in myDict:","        for a in myDict:","            for r in myDict:","                for e in myDict:","                    if crypt(c + a + r + e, salt) == myArgument:","                        return c + a + r + e","    for c in myDict:","        for a in myDict:","            for r in myDict:","                for e in myDict:","                    for s in myDict:","                        if crypt(c + a + r + e + s, salt) == myArgument:","                            return c + a + r + e + s","    return \"Failed to find password\"","","","if __name__ == \"__main__\":","    main()"],"id":1489},{"start":{"row":0,"column":0},"end":{"row":59,"column":10},"action":"insert","lines":["# cracks passwords","","# salt is first 2 characters of argv","from sys import argv","from crypt import crypt","# command lines arguments are array at argv","# remember that argv[0] is the program name","","# all chars rated by frequency of use in oxford dictionary, not including space","myDict = \"eEtTaAoOiInNsSrRhHlLdDcCuUmMfFpPgGwWyYbBvVkKxXjJqQzZ\"","salt = \"\"","myArgument = \"\"","","","def main():","    if len(argv) == 2 and len(argv[1]) == 13:","        # there is one command line argument","        # and it has a length of 13","        myArgument = argv[1]","        # assign salt to first 2 chars of hash","        salt = myArgument[0:2]","        print(myFunction(salt, myArgument))","","    else:","        # orelse remind of proper usage","        print(\"Usage: python crack.py <hashed password>\")","    return","","","def myFunction(salt, myArgument):","    for c in myDict:","        if crypt(c, salt) == myArgument:","            return c","    for c in myDict:","        for a in myDict:","            if crypt(c + a, salt) == myArgument:","                return c + a","    for c in myDict:","        for a in myDict:","            for r in myDict:","                if crypt(c + a + r, salt) == myArgument:","                    return c + a + r","    for c in myDict:","        for a in myDict:","            for r in myDict:","                for e in myDict:","                    if crypt(c + a + r + e, salt) == myArgument:","                        return c + a + r + e","    for c in myDict:","        for a in myDict:","            for r in myDict:","                for e in myDict:","                    for s in myDict:","                        if crypt(c + a + r + e + s, salt) == myArgument:","                            return c + a + r + e + s","    return \"Failed to find password\"","","","if __name__ == \"__main__\":","    main()"]}]]},"ace":{"folds":[],"scrolltop":698.5,"scrollleft":0,"selection":{"start":{"row":59,"column":10},"end":{"row":59,"column":10},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":45,"state":"start","mode":"ace/mode/python"}},"timestamp":1531879000178,"hash":"b5cf8c75161c26136253e79497600cf85c00ef0d"}