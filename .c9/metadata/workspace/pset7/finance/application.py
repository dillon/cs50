{"filter":false,"title":"application.py","tooltip":"/pset7/finance/application.py","undoManager":{"mark":100,"position":100,"stack":[[{"start":{"row":90,"column":43},"end":{"row":90,"column":53},"action":"remove","lines":["isinstance"],"id":3650}],[{"start":{"row":90,"column":43},"end":{"row":90,"column":44},"action":"insert","lines":["R"],"id":3651},{"start":{"row":90,"column":44},"end":{"row":90,"column":45},"action":"insert","lines":["e"]},{"start":{"row":90,"column":45},"end":{"row":90,"column":46},"action":"insert","lines":["p"]},{"start":{"row":90,"column":46},"end":{"row":90,"column":47},"action":"insert","lines":["r"]},{"start":{"row":90,"column":47},"end":{"row":90,"column":48},"action":"insert","lines":["e"]},{"start":{"row":90,"column":48},"end":{"row":90,"column":49},"action":"insert","lines":["s"]},{"start":{"row":90,"column":49},"end":{"row":90,"column":50},"action":"insert","lines":["e"]},{"start":{"row":90,"column":50},"end":{"row":90,"column":51},"action":"insert","lines":["n"]},{"start":{"row":90,"column":51},"end":{"row":90,"column":52},"action":"insert","lines":["t"]},{"start":{"row":90,"column":52},"end":{"row":90,"column":53},"action":"insert","lines":["s"]},{"start":{"row":90,"column":53},"end":{"row":90,"column":54},"action":"insert","lines":["I"]},{"start":{"row":90,"column":54},"end":{"row":90,"column":55},"action":"insert","lines":["n"]},{"start":{"row":90,"column":55},"end":{"row":90,"column":56},"action":"insert","lines":["t"]}],[{"start":{"row":90,"column":57},"end":{"row":90,"column":63},"action":"remove","lines":["float("],"id":3652}],[{"start":{"row":90,"column":64},"end":{"row":90,"column":69},"action":"remove","lines":[", int"],"id":3653}],[{"start":{"row":90,"column":64},"end":{"row":90,"column":65},"action":"remove","lines":[")"],"id":3654}],[{"start":{"row":365,"column":8},"end":{"row":365,"column":9},"action":"remove","lines":[" "],"id":3657}],[{"start":{"row":90,"column":43},"end":{"row":90,"column":65},"action":"remove","lines":["RepresentsInt(shares) "],"id":3658}],[{"start":{"row":90,"column":42},"end":{"row":90,"column":43},"action":"remove","lines":[" "],"id":3659}],[{"start":{"row":90,"column":41},"end":{"row":90,"column":42},"action":"remove","lines":["t"],"id":3660}],[{"start":{"row":90,"column":39},"end":{"row":90,"column":41},"action":"remove","lines":["no"],"id":3661}],[{"start":{"row":90,"column":38},"end":{"row":90,"column":39},"action":"remove","lines":[" "],"id":3662}],[{"start":{"row":90,"column":36},"end":{"row":90,"column":38},"action":"remove","lines":["or"],"id":3663}],[{"start":{"row":90,"column":8},"end":{"row":91,"column":0},"action":"insert","lines":["",""],"id":3664},{"start":{"row":91,"column":0},"end":{"row":91,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":90,"column":8},"end":{"row":90,"column":9},"action":"insert","lines":["i"],"id":3665},{"start":{"row":90,"column":9},"end":{"row":90,"column":10},"action":"insert","lines":["f"]}],[{"start":{"row":90,"column":10},"end":{"row":90,"column":11},"action":"insert","lines":[" "],"id":3666},{"start":{"row":90,"column":11},"end":{"row":90,"column":12},"action":"insert","lines":["n"]},{"start":{"row":90,"column":12},"end":{"row":90,"column":13},"action":"insert","lines":["o"]},{"start":{"row":90,"column":13},"end":{"row":90,"column":14},"action":"insert","lines":["t"]}],[{"start":{"row":90,"column":14},"end":{"row":90,"column":15},"action":"insert","lines":[" "],"id":3667}],[{"start":{"row":90,"column":15},"end":{"row":90,"column":37},"action":"insert","lines":["RepresentsInt(shares) "],"id":3668}],[{"start":{"row":90,"column":36},"end":{"row":90,"column":37},"action":"remove","lines":[" "],"id":3669}],[{"start":{"row":90,"column":36},"end":{"row":90,"column":37},"action":"insert","lines":[":"],"id":3670}],[{"start":{"row":90,"column":37},"end":{"row":91,"column":0},"action":"insert","lines":["",""],"id":3671},{"start":{"row":91,"column":0},"end":{"row":91,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":91,"column":12},"end":{"row":91,"column":70},"action":"insert","lines":["return apology(\"You must enter a valid symbol and shares\")"],"id":3672}],[{"start":{"row":91,"column":45},"end":{"row":91,"column":57},"action":"remove","lines":["valid symbol"],"id":3673}],[{"start":{"row":91,"column":45},"end":{"row":91,"column":46},"action":"insert","lines":["v"],"id":3674},{"start":{"row":91,"column":46},"end":{"row":91,"column":47},"action":"insert","lines":["a"]},{"start":{"row":91,"column":47},"end":{"row":91,"column":48},"action":"insert","lines":["l"]},{"start":{"row":91,"column":48},"end":{"row":91,"column":49},"action":"insert","lines":["i"]},{"start":{"row":91,"column":49},"end":{"row":91,"column":50},"action":"insert","lines":["d"]}],[{"start":{"row":91,"column":50},"end":{"row":91,"column":51},"action":"insert","lines":[" "],"id":3675},{"start":{"row":91,"column":51},"end":{"row":91,"column":52},"action":"insert","lines":["n"]},{"start":{"row":91,"column":52},"end":{"row":91,"column":53},"action":"insert","lines":["u"]},{"start":{"row":91,"column":53},"end":{"row":91,"column":54},"action":"insert","lines":["m"]},{"start":{"row":91,"column":54},"end":{"row":91,"column":55},"action":"insert","lines":["b"]},{"start":{"row":91,"column":55},"end":{"row":91,"column":56},"action":"insert","lines":["e"]},{"start":{"row":91,"column":56},"end":{"row":91,"column":57},"action":"insert","lines":["r"]}],[{"start":{"row":91,"column":57},"end":{"row":91,"column":58},"action":"insert","lines":[" "],"id":3676},{"start":{"row":91,"column":58},"end":{"row":91,"column":59},"action":"insert","lines":["o"]},{"start":{"row":91,"column":59},"end":{"row":91,"column":60},"action":"insert","lines":["f"]}],[{"start":{"row":91,"column":60},"end":{"row":91,"column":64},"action":"remove","lines":[" and"],"id":3677}],[{"start":{"row":364,"column":0},"end":{"row":371,"column":20},"action":"remove","lines":["","# check if int","def RepresentsInt(s):","    try:","        int(s)","        return True","    except ValueError:","        return False"],"id":3678}],[{"start":{"row":363,"column":40},"end":{"row":364,"column":0},"action":"remove","lines":["",""],"id":3679}],[{"start":{"row":31,"column":0},"end":{"row":32,"column":0},"action":"insert","lines":["",""],"id":3680},{"start":{"row":32,"column":0},"end":{"row":33,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":32,"column":0},"end":{"row":33,"column":0},"action":"remove","lines":["",""],"id":3681},{"start":{"row":31,"column":0},"end":{"row":32,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":44,"column":0},"end":{"row":45,"column":0},"action":"insert","lines":["",""],"id":3682}],[{"start":{"row":45,"column":0},"end":{"row":52,"column":20},"action":"insert","lines":["","# check if int","def RepresentsInt(s):","    try:","        int(s)","        return True","    except ValueError:","        return False"],"id":3683}],[{"start":{"row":52,"column":20},"end":{"row":53,"column":0},"action":"insert","lines":["",""],"id":3684},{"start":{"row":53,"column":0},"end":{"row":53,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":53,"column":0},"end":{"row":53,"column":8},"action":"remove","lines":["        "],"id":3685}],[{"start":{"row":53,"column":0},"end":{"row":54,"column":0},"action":"insert","lines":["",""],"id":3686}],[{"start":{"row":102,"column":39},"end":{"row":102,"column":44},"action":"remove","lines":["float"],"id":3687},{"start":{"row":102,"column":39},"end":{"row":102,"column":40},"action":"insert","lines":["i"]},{"start":{"row":102,"column":40},"end":{"row":102,"column":41},"action":"insert","lines":["n"]},{"start":{"row":102,"column":41},"end":{"row":102,"column":42},"action":"insert","lines":["t"]}],[{"start":{"row":116,"column":69},"end":{"row":116,"column":74},"action":"remove","lines":["float"],"id":3691},{"start":{"row":116,"column":69},"end":{"row":116,"column":70},"action":"insert","lines":["i"]},{"start":{"row":116,"column":70},"end":{"row":116,"column":71},"action":"insert","lines":["n"]},{"start":{"row":116,"column":71},"end":{"row":116,"column":72},"action":"insert","lines":["t"]}],[{"start":{"row":282,"column":43},"end":{"row":282,"column":53},"action":"remove","lines":["isinstance"],"id":3693},{"start":{"row":282,"column":43},"end":{"row":282,"column":44},"action":"insert","lines":["R"]},{"start":{"row":282,"column":44},"end":{"row":282,"column":45},"action":"insert","lines":["e"]},{"start":{"row":282,"column":45},"end":{"row":282,"column":46},"action":"insert","lines":["p"]},{"start":{"row":282,"column":46},"end":{"row":282,"column":47},"action":"insert","lines":["r"]},{"start":{"row":282,"column":47},"end":{"row":282,"column":48},"action":"insert","lines":["e"]},{"start":{"row":282,"column":48},"end":{"row":282,"column":49},"action":"insert","lines":["s"]},{"start":{"row":282,"column":49},"end":{"row":282,"column":50},"action":"insert","lines":["e"]},{"start":{"row":282,"column":50},"end":{"row":282,"column":51},"action":"insert","lines":["n"]},{"start":{"row":282,"column":51},"end":{"row":282,"column":52},"action":"insert","lines":["t"]},{"start":{"row":282,"column":52},"end":{"row":282,"column":53},"action":"insert","lines":["s"]},{"start":{"row":282,"column":53},"end":{"row":282,"column":54},"action":"insert","lines":["I"]},{"start":{"row":282,"column":54},"end":{"row":282,"column":55},"action":"insert","lines":["n"]},{"start":{"row":282,"column":55},"end":{"row":282,"column":56},"action":"insert","lines":["t"]}],[{"start":{"row":282,"column":56},"end":{"row":282,"column":63},"action":"remove","lines":["(float("],"id":3694}],[{"start":{"row":282,"column":62},"end":{"row":282,"column":68},"action":"remove","lines":["), int"],"id":3695}],[{"start":{"row":282,"column":39},"end":{"row":282,"column":63},"action":"remove","lines":["not RepresentsIntshares)"],"id":3696}],[{"start":{"row":282,"column":38},"end":{"row":282,"column":39},"action":"remove","lines":[" "],"id":3697}],[{"start":{"row":282,"column":36},"end":{"row":282,"column":38},"action":"remove","lines":["or"],"id":3698}],[{"start":{"row":282,"column":35},"end":{"row":282,"column":36},"action":"remove","lines":[" "],"id":3699}],[{"start":{"row":282,"column":8},"end":{"row":283,"column":0},"action":"insert","lines":["",""],"id":3700},{"start":{"row":283,"column":0},"end":{"row":283,"column":8},"action":"insert","lines":["        "]}],[{"start":{"row":282,"column":8},"end":{"row":282,"column":9},"action":"insert","lines":["i"],"id":3701},{"start":{"row":282,"column":9},"end":{"row":282,"column":10},"action":"insert","lines":["f"]}],[{"start":{"row":282,"column":10},"end":{"row":282,"column":11},"action":"insert","lines":[" "],"id":3702},{"start":{"row":282,"column":11},"end":{"row":282,"column":12},"action":"insert","lines":["n"]},{"start":{"row":282,"column":12},"end":{"row":282,"column":13},"action":"insert","lines":["o"]},{"start":{"row":282,"column":13},"end":{"row":282,"column":14},"action":"insert","lines":["t"]}],[{"start":{"row":282,"column":14},"end":{"row":282,"column":15},"action":"insert","lines":[" "],"id":3703}],[{"start":{"row":282,"column":14},"end":{"row":282,"column":15},"action":"remove","lines":[" "],"id":3705}],[{"start":{"row":282,"column":11},"end":{"row":282,"column":14},"action":"remove","lines":["not"],"id":3706}],[{"start":{"row":282,"column":11},"end":{"row":282,"column":35},"action":"insert","lines":["not RepresentsIntshares)"],"id":3707}],[{"start":{"row":282,"column":35},"end":{"row":282,"column":36},"action":"insert","lines":[":"],"id":3708}],[{"start":{"row":282,"column":35},"end":{"row":282,"column":36},"action":"remove","lines":[":"],"id":3709},{"start":{"row":282,"column":34},"end":{"row":282,"column":35},"action":"remove","lines":[")"]}],[{"start":{"row":282,"column":34},"end":{"row":282,"column":35},"action":"insert","lines":[":"],"id":3710}],[{"start":{"row":282,"column":35},"end":{"row":283,"column":0},"action":"insert","lines":["",""],"id":3711},{"start":{"row":283,"column":0},"end":{"row":283,"column":12},"action":"insert","lines":["            "]}],[{"start":{"row":283,"column":12},"end":{"row":283,"column":70},"action":"insert","lines":["return apology(\"You must enter a valid symbol and shares\")"],"id":3712}],[{"start":{"row":283,"column":51},"end":{"row":283,"column":62},"action":"remove","lines":["symbol and "],"id":3713},{"start":{"row":283,"column":51},"end":{"row":283,"column":52},"action":"insert","lines":["n"]},{"start":{"row":283,"column":52},"end":{"row":283,"column":53},"action":"insert","lines":["u"]},{"start":{"row":283,"column":53},"end":{"row":283,"column":54},"action":"insert","lines":["m"]},{"start":{"row":283,"column":54},"end":{"row":283,"column":55},"action":"insert","lines":["b"]},{"start":{"row":283,"column":55},"end":{"row":283,"column":56},"action":"insert","lines":["e"]},{"start":{"row":283,"column":56},"end":{"row":283,"column":57},"action":"insert","lines":["r"]}],[{"start":{"row":283,"column":57},"end":{"row":283,"column":58},"action":"insert","lines":[" "],"id":3714},{"start":{"row":283,"column":58},"end":{"row":283,"column":59},"action":"insert","lines":["o"]},{"start":{"row":283,"column":59},"end":{"row":283,"column":60},"action":"insert","lines":["f"]}],[{"start":{"row":283,"column":60},"end":{"row":283,"column":61},"action":"insert","lines":[" "],"id":3715}],[{"start":{"row":283,"column":45},"end":{"row":283,"column":50},"action":"remove","lines":["valid"],"id":3716},{"start":{"row":283,"column":45},"end":{"row":283,"column":46},"action":"insert","lines":["w"]},{"start":{"row":283,"column":46},"end":{"row":283,"column":47},"action":"insert","lines":["h"]},{"start":{"row":283,"column":47},"end":{"row":283,"column":48},"action":"insert","lines":["o"]},{"start":{"row":283,"column":48},"end":{"row":283,"column":49},"action":"insert","lines":["l"]},{"start":{"row":283,"column":49},"end":{"row":283,"column":50},"action":"insert","lines":["e"]}],[{"start":{"row":283,"column":45},"end":{"row":283,"column":50},"action":"remove","lines":["whole"],"id":3717},{"start":{"row":283,"column":45},"end":{"row":283,"column":46},"action":"insert","lines":["v"]},{"start":{"row":283,"column":46},"end":{"row":283,"column":47},"action":"insert","lines":["a"]},{"start":{"row":283,"column":47},"end":{"row":283,"column":48},"action":"insert","lines":["l"]},{"start":{"row":283,"column":48},"end":{"row":283,"column":49},"action":"insert","lines":["i"]},{"start":{"row":283,"column":49},"end":{"row":283,"column":50},"action":"insert","lines":["d"]}],[{"start":{"row":283,"column":50},"end":{"row":283,"column":51},"action":"insert","lines":[" "],"id":3718},{"start":{"row":283,"column":51},"end":{"row":283,"column":52},"action":"insert","lines":["w"]},{"start":{"row":283,"column":52},"end":{"row":283,"column":53},"action":"insert","lines":["h"]},{"start":{"row":283,"column":53},"end":{"row":283,"column":54},"action":"insert","lines":["o"]},{"start":{"row":283,"column":54},"end":{"row":283,"column":55},"action":"insert","lines":["l"]},{"start":{"row":283,"column":55},"end":{"row":283,"column":56},"action":"insert","lines":["e"]}],[{"start":{"row":284,"column":39},"end":{"row":284,"column":44},"action":"remove","lines":["float"],"id":3720},{"start":{"row":284,"column":39},"end":{"row":284,"column":40},"action":"insert","lines":["i"]},{"start":{"row":284,"column":40},"end":{"row":284,"column":41},"action":"insert","lines":["n"]},{"start":{"row":284,"column":41},"end":{"row":284,"column":42},"action":"insert","lines":["t"]}],[{"start":{"row":290,"column":30},"end":{"row":290,"column":35},"action":"remove","lines":["float"],"id":3721},{"start":{"row":290,"column":30},"end":{"row":290,"column":31},"action":"insert","lines":["i"]},{"start":{"row":290,"column":31},"end":{"row":290,"column":32},"action":"insert","lines":["n"]},{"start":{"row":290,"column":32},"end":{"row":290,"column":33},"action":"insert","lines":["t"]}],[{"start":{"row":79,"column":20},"end":{"row":79,"column":25},"action":"remove","lines":["float"],"id":3722},{"start":{"row":79,"column":20},"end":{"row":79,"column":21},"action":"insert","lines":["i"]},{"start":{"row":79,"column":21},"end":{"row":79,"column":22},"action":"insert","lines":["n"]},{"start":{"row":79,"column":22},"end":{"row":79,"column":23},"action":"insert","lines":["t"]}],[{"start":{"row":111,"column":30},"end":{"row":111,"column":42},"action":"remove","lines":["float(shares"],"id":3723},{"start":{"row":111,"column":30},"end":{"row":111,"column":41},"action":"insert","lines":["int(shares)"]},{"start":{"row":130,"column":79},"end":{"row":130,"column":91},"action":"remove","lines":["float(shares"]},{"start":{"row":130,"column":79},"end":{"row":130,"column":90},"action":"insert","lines":["int(shares)"]}],[{"start":{"row":111,"column":41},"end":{"row":111,"column":42},"action":"remove","lines":[")"],"id":3724}],[{"start":{"row":130,"column":90},"end":{"row":130,"column":91},"action":"remove","lines":[")"],"id":3727}],[{"start":{"row":130,"column":105},"end":{"row":131,"column":0},"action":"insert","lines":["",""],"id":3728},{"start":{"row":131,"column":0},"end":{"row":131,"column":45},"action":"insert","lines":["                                             "]}],[{"start":{"row":131,"column":44},"end":{"row":131,"column":45},"action":"remove","lines":[" "],"id":3729},{"start":{"row":131,"column":40},"end":{"row":131,"column":44},"action":"remove","lines":["    "]},{"start":{"row":131,"column":36},"end":{"row":131,"column":40},"action":"remove","lines":["    "]},{"start":{"row":131,"column":32},"end":{"row":131,"column":36},"action":"remove","lines":["    "]},{"start":{"row":131,"column":28},"end":{"row":131,"column":32},"action":"remove","lines":["    "]},{"start":{"row":131,"column":24},"end":{"row":131,"column":28},"action":"remove","lines":["    "]},{"start":{"row":131,"column":20},"end":{"row":131,"column":24},"action":"remove","lines":["    "]}],[{"start":{"row":0,"column":0},"end":{"row":377,"column":0},"action":"remove","lines":["import os","","from cs50 import SQL","from flask import Flask, flash, redirect, render_template, request, session","from flask_session import Session","from tempfile import mkdtemp","from werkzeug.exceptions import default_exceptions","from werkzeug.security import check_password_hash, generate_password_hash","","from helpers import apology, login_required, lookup, usd","","# Ensure environment variable is set","if not os.environ.get(\"API_KEY\"):","    raise RuntimeError(\"API_KEY not set\")","","# Configure application","app = Flask(__name__)","","# Ensure templates are auto-reloaded","app.config[\"TEMPLATES_AUTO_RELOAD\"] = True","","# Ensure responses aren't cached","","","@app.after_request","def after_request(response):","    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"","    response.headers[\"Expires\"] = 0","    response.headers[\"Pragma\"] = \"no-cache\"","    return response","","","# Custom filter","app.jinja_env.filters[\"usd\"] = usd","","# Configure session to use filesystem (instead of signed cookies)","app.config[\"SESSION_FILE_DIR\"] = mkdtemp()","app.config[\"SESSION_PERMANENT\"] = False","app.config[\"SESSION_TYPE\"] = \"filesystem\"","Session(app)","","# Configure CS50 Library to use SQLite database","db = SQL(\"sqlite:///finance.db\")","","","","# check if int","def RepresentsInt(s):","    try:","        int(s)","        return True","    except ValueError:","        return False","","","@app.route(\"/\")","@login_required","def index():","    \"\"\"Show portfolio of stocks\"\"\"","    # jinja values = stocks[[symbol, shares, price, value]], cash, totalvalue","    portfolio = db.execute(","        \"SELECT * FROM portfolios WHERE userID = :sessionid\", sessionid=session[\"user_id\"])","    cashrow = db.execute(","        \"SELECT cash FROM users WHERE id = :sessionid\", sessionid=session[\"user_id\"])","    if cashrow:","        cash = cashrow[0][\"cash\"]","    else:","        cash = 10000","    stocks = []","    totalvalue = cash","    if portfolio:","        for stock in portfolio:","            symbol = stock[\"symbol\"]","            shares = stock[\"shares\"]","            # lookup name and price","            myvalue = lookup(stock[\"symbol\"])","            if not myvalue:","                return apology(\"API not working\")","            price = myvalue[\"price\"]","            value = int(shares) * float(price)","            stocks.append({","                \"symbol\": symbol,","                \"shares\": shares,","                \"price\": usd(price),","                \"value\": usd(value)","            })","            totalvalue += price * shares","","    return render_template(\"index.html\", stocks=stocks, cash=usd(cash), totalvalue=usd(totalvalue))","","","@app.route(\"/buy\", methods=[\"GET\", \"POST\"])","@login_required","def buy():","    \"\"\"Buy shares of stock\"\"\"","    if request.method == \"POST\":","","        # form names = symbol, shares","        symbol = request.form.get(\"symbol\")","        shares = request.form.get(\"shares\")","        if not RepresentsInt(shares):","            return apology(\"You must enter a valid number of shares\")","        if not symbol or not shares or int(shares) <= 0:","            return apology(\"You must enter a valid symbol and shares\")","        quote = lookup(symbol)","        if not quote:","            return apology(\"Not a valid symbol or API not working\")","        walletrow = db.execute(","            \"SELECT cash FROM users WHERE id = :sessionid\", sessionid=session[\"user_id\"])","        wallet = walletrow[0][\"cash\"]","        price = quote[\"price\"]","        cost = float(price) * int(shares)","        if wallet < cost:","            return apology(\"Not enough cash in account\")","        # if you can afford it, insert into history table","        resultHistory = db.execute(\"INSERT INTO history (userID, shares, symbol, price) VALUES(:userID, :shares, :symbol, :price)\",","                                   userID=session[\"user_id\"], shares=int(shares), symbol=symbol, price=float(price))","        if not resultHistory:","            return apology(\"Problem making a purchase. Please try again later.\")","        # look for in and then update portfolios","        resultPortfoliosSearch = db.execute(","            \"SELECT shares FROM portfolios WHERE userID = :sessionid AND symbol = :symbol\", sessionid=int(session[\"user_id\"]), symbol=symbol)","        if resultPortfoliosSearch:","            # if you found it, update it","            resultPortfoliosUpdate = db.execute(","                \"UPDATE portfolios SET shares = shares + :shares WHERE userID = :sessionid AND symbol = :symbol\", sessionid=session[\"user_id\"], symbol=symbol, shares=shares)","            if not resultPortfoliosUpdate:","                return apology(\"Error resultPortfoliosUpdate\")","        else:","            resultPortfoliosAdd = db.execute(\"INSERT INTO portfolios (userID, shares, symbol) VALUES(:userID, :shares, :symbol)\",","                                             userID=session[\"user_id\"], shares=int(shares), symbol=symbol","                    )","            if not resultPortfoliosAdd:","                return apology(\"Error resultPortfoliosAdd\")","        # and update users table cash","        resultUsers = db.execute(","            \"UPDATE users SET cash = cash - :cost WHERE id = :sessionid\", cost=cost, sessionid=session[\"user_id\"])","        if not resultUsers:","            return apology(\"Problem updating your wallet. Please try again later.\")","        # redirect to index","        return redirect(\"/\")","    else:","        return render_template(\"buy.html\")","","","@app.route(\"/history\")","@login_required","def history():","    \"\"\"Show portfolio of stocks\"\"\"","    # jinja values = transaction[{symbol, shares, price, date}]","","    resultsHistory = db.execute(","        \"SELECT * FROM history WHERE userID = :sessionid\", sessionid=session[\"user_id\"])","    transactions = []","    if resultsHistory:","        for transaction in resultsHistory:","            # db values = transactionID, userID, shares, symbol, price, datetime","            symbol = transaction[\"symbol\"]","            shares = transaction[\"shares\"]","            price = transaction[\"price\"]","            date = transaction[\"datetime\"]","            transactions.append({","                \"symbol\": symbol,","                \"shares\": shares,","                \"price\": usd(price),","                \"date\": date","            })","","    else:","        transactions.append({","            \"name\": \"-\",","            \"symbol\": \"-\",","            \"shares\": \"-\",","            \"price\": \"-\",","            \"value\": \"-\"","        })","","    return render_template(\"history.html\", transactions=transactions)","","","@app.route(\"/login\", methods=[\"GET\", \"POST\"])","def login():","    \"\"\"Log user in\"\"\"","","    # Forget any user_id","    session.clear()","","    # User reached route via POST (as by submitting a form via POST)","    if request.method == \"POST\":","","        # Ensure username was submitted","        if not request.form.get(\"username\"):","            return apology(\"must provide username\", 403)","","        # Ensure password was submitted","        elif not request.form.get(\"password\"):","            return apology(\"must provide password\", 403)","","        # Query database for username","        rows = db.execute(\"SELECT * FROM users WHERE username = :username\",","                          username=request.form.get(\"username\"))","","        # Ensure username exists and password is correct","        if len(rows) != 1 or not check_password_hash(rows[0][\"hash\"], request.form.get(\"password\")):","            return apology(\"invalid username and/or password\", 403)","","        # Remember which user has logged in","        session[\"user_id\"] = rows[0][\"id\"]","","        # Redirect user to home page","        return redirect(\"/\")","","    # User reached route via GET (as by clicking a link or via redirect)","    else:","        return render_template(\"login.html\")","","","@app.route(\"/logout\")","def logout():","    \"\"\"Log user out\"\"\"","","    # Forget any user_id","    session.clear()","","    # Redirect user to login form","    return redirect(\"/\")","","","@app.route(\"/quote\", methods=[\"GET\", \"POST\"])","@login_required","def quote():","    \"\"\"Get stock quote.\"\"\"","    if request.method == \"POST\":","        value = request.form.get(\"symbol\")","        if not value:","            return apology(\"Please enter a valid ticker\")","        quote = lookup(value)","        if not quote:","            return apology(\"Not a valid symbol\")","        return render_template(\"display.html\", ticker=quote[\"symbol\"], price=usd(int(quote[\"price\"])))","    else:","        return render_template(\"quote.html\")","","","@app.route(\"/register\", methods=[\"GET\", \"POST\"])","def register():","    \"\"\"Register user\"\"\"","    # clear session","    session.clear()","    # User reached route via POST (as by submitting a form via POST)","    if request.method == \"POST\":","        username = request.form.get(\"username\")","        password = request.form.get(\"password\")","        confirmation = request.form.get(\"confirmation\")","        # check form is correctly entered","        if not username:","            return apology(\"must create a username\")","        if not password:","            return apology(\"must create a password\")","        if not confirmation:","            return apology(\"must enter password again to confirm\")","        if not password == confirmation:","            return apology(\"password and password confirmation must be identical\")","        # encrypt and add","        result = db.execute(\"INSERT INTO users (username, hash) VALUES(:username, :hashedpassword)\",","                            username=username, hashedpassword=generate_password_hash(password))","        if not result:","            return apology(\"that username is already taken\")","        session[\"user_id\"] = username","        return redirect(\"/\")","    # User reached route via GET (as by clicking a link or via redirect)","    else:","        return render_template(\"register.html\")","","","@app.route(\"/sell\", methods=[\"GET\", \"POST\"])","@login_required","def sell():","    \"\"\"Sell shares of stock\"\"\"","    if request.method == \"POST\":","        # form names = symbol, shares","        symbol = request.form.get(\"symbol\")","        shares = request.form.get(\"shares\")","        if not RepresentsIntshares:","            return apology(\"You must enter a valid whole number of shares\")","        if not symbol or not shares or int(shares) <= 0:","            return apology(\"You must enter a valid symbol and shares\")","        quote = lookup(symbol)","        if not quote:","            return apology(\"Not a valid symbol\")","        price = quote[\"price\"]","        cost = float(price) * int(shares)","","        # look for in and then update portfolios","        resultPortfoliosSearch = db.execute(","            \"SELECT shares FROM portfolios WHERE userID = :sessionid AND symbol = :symbol\", sessionid=int(session[\"user_id\"]), symbol=symbol)","        if int(resultPortfoliosSearch[0][\"shares\"]) > int(shares):","            # if you have it and you have extra shares, update it","            resultPortfoliosUpdate = db.execute(\"UPDATE portfolios SET shares = shares - :shares WHERE userID = :sessionid AND symbol = :symbol\",","                                                sessionid=session[\"user_id\"], symbol=symbol, shares=int(shares))","            if not resultPortfoliosUpdate:","                return apology(\"You don't have enough shares of that stock\")","        elif resultPortfoliosSearch and resultPortfoliosSearch[0][\"shares\"] == int(shares):","            # if you have it and you have exactly the same number of shares, just delete it from portfolio","            resultPortfoliosUpdate = db.execute(","                \"DELETE FROM portfolios WHERE userID = :sessionid AND symbol = :symbol\", sessionid=session[\"user_id\"], symbol=symbol)","            if not resultPortfoliosUpdate:","                return apology(\"You don't own any shares of that stock\")","        else:","            return apology(\"You don't have enough shares of that stock\")","        # also insert it into history table","        resultHistory = db.execute(\"INSERT INTO history (userID, shares, symbol, price) VALUES(:userID, :shares, :symbol, :price)\",","                                   userID=session[\"user_id\"], shares=0 - int(shares), symbol=symbol, price=float(price))","        if not resultHistory:","            return apology(\"Problem making a purchase. Please try again later.\")","        # and update users table cash","        resultUsers = db.execute(","            \"UPDATE users SET cash = cash + :cost WHERE id = :sessionid\", cost=cost, sessionid=session[\"user_id\"])","        if not resultUsers:","            return apology(\"Problem updating your wallet. Please try again later.\")","        # redirect to index","        return redirect(\"/\")","    else:","        # get symbols","        resultSymbols = db.execute(\"SELECT symbol FROM portfolios WHERE userID = :sessionid\", sessionid=session[\"user_id\"])","        if not resultSymbols:","            return apology(\"You don't have any stocks to sell\")","        return render_template(\"sell.html\", symbols=resultSymbols)","","","@app.route(\"/account\", methods=[\"GET\", \"POST\"])","@login_required","def account():","    \"\"\"Allow user to delete their account\"\"\"","    if request.method == \"POST\":","        # Ensure password was submitted","        if not request.form.get(\"password\"):","            return apology(\"must provide password\", 403)","","        # Query database for username","        rows = db.execute(\"SELECT * FROM users WHERE id = :userID\",","                          userID=session[\"user_id\"])","","        # Ensure username exists and password is correct","        if len(rows) != 1 or not check_password_hash(rows[0][\"hash\"], request.form.get(\"password\")):","            return apology(\"invalid username and/or password\", 403)","","        # delete from users","        resultAccountDeleteU = db.execute(","            \"DELETE FROM users WHERE id = :sessionid\", sessionid=session[\"user_id\"])","        if not resultAccountDeleteU:","            return apology(\"Failed to delete account for whatever reason\")","        # delete from history","        resultAccountDeleteH = db.execute(","            \"DELETE FROM history WHERE userID = :sessionid\", sessionid=session[\"user_id\"])","        if not resultAccountDeleteH:","            return apology(\"Failed to delete account for whatever reason\")","        # delete from portfolios","        resultAccountDeleteP = db.execute(","            \"DELETE FROM portfolios WHERE userID = :sessionid\", sessionid=session[\"user_id\"])","        if not resultAccountDeleteP:","            return apology(\"Failed to delete account for whatever reason\")","","        session.clear()","        return redirect(\"/\")","    else:","        return render_template(\"account.html\")","","","def errorhandler(e):","    \"\"\"Handle error\"\"\"","    return apology(e.name, e.code)","","","# listen for errors","for code in default_exceptions:","    app.errorhandler(code)(errorhandler)",""],"id":3730},{"start":{"row":0,"column":0},"end":{"row":377,"column":0},"action":"insert","lines":["import os","","from cs50 import SQL","from flask import Flask, flash, redirect, render_template, request, session","from flask_session import Session","from tempfile import mkdtemp","from werkzeug.exceptions import default_exceptions","from werkzeug.security import check_password_hash, generate_password_hash","","from helpers import apology, login_required, lookup, usd","","# Ensure environment variable is set","if not os.environ.get(\"API_KEY\"):","    raise RuntimeError(\"API_KEY not set\")","","# Configure application","app = Flask(__name__)","","# Ensure templates are auto-reloaded","app.config[\"TEMPLATES_AUTO_RELOAD\"] = True","","# Ensure responses aren't cached","","","@app.after_request","def after_request(response):","    response.headers[\"Cache-Control\"] = \"no-cache, no-store, must-revalidate\"","    response.headers[\"Expires\"] = 0","    response.headers[\"Pragma\"] = \"no-cache\"","    return response","","","# Custom filter","app.jinja_env.filters[\"usd\"] = usd","","# Configure session to use filesystem (instead of signed cookies)","app.config[\"SESSION_FILE_DIR\"] = mkdtemp()","app.config[\"SESSION_PERMANENT\"] = False","app.config[\"SESSION_TYPE\"] = \"filesystem\"","Session(app)","","# Configure CS50 Library to use SQLite database","db = SQL(\"sqlite:///finance.db\")","","","# check if int","def RepresentsInt(s):","    try:","        int(s)","        return True","    except ValueError:","        return False","","","@app.route(\"/\")","@login_required","def index():","    \"\"\"Show portfolio of stocks\"\"\"","    # jinja values = stocks[[symbol, shares, price, value]], cash, totalvalue","    portfolio = db.execute(","        \"SELECT * FROM portfolios WHERE userID = :sessionid\", sessionid=session[\"user_id\"])","    cashrow = db.execute(","        \"SELECT cash FROM users WHERE id = :sessionid\", sessionid=session[\"user_id\"])","    if cashrow:","        cash = cashrow[0][\"cash\"]","    else:","        cash = 10000","    stocks = []","    totalvalue = cash","    if portfolio:","        for stock in portfolio:","            symbol = stock[\"symbol\"]","            shares = stock[\"shares\"]","            # lookup name and price","            myvalue = lookup(stock[\"symbol\"])","            if not myvalue:","                return apology(\"API not working\")","            price = myvalue[\"price\"]","            value = int(shares) * float(price)","            stocks.append({","                \"symbol\": symbol,","                \"shares\": shares,","                \"price\": usd(price),","                \"value\": usd(value)","            })","            totalvalue += price * shares","","    return render_template(\"index.html\", stocks=stocks, cash=usd(cash), totalvalue=usd(totalvalue))","","","@app.route(\"/buy\", methods=[\"GET\", \"POST\"])","@login_required","def buy():","    \"\"\"Buy shares of stock\"\"\"","    if request.method == \"POST\":","","        # form names = symbol, shares","        symbol = request.form.get(\"symbol\")","        shares = request.form.get(\"shares\")","        if not RepresentsInt(shares):","            return apology(\"You must enter a valid number of shares\")","        if not symbol or not shares or int(shares) <= 0:","            return apology(\"You must enter a valid symbol and shares\")","        quote = lookup(symbol)","        if not quote:","            return apology(\"Not a valid symbol or API not working\")","        walletrow = db.execute(","            \"SELECT cash FROM users WHERE id = :sessionid\", sessionid=session[\"user_id\"])","        wallet = walletrow[0][\"cash\"]","        price = quote[\"price\"]","        cost = float(price) * int(shares)","        if wallet < cost:","            return apology(\"Not enough cash in account\")","        # if you can afford it, insert into history table","        resultHistory = db.execute(\"INSERT INTO history (userID, shares, symbol, price) VALUES(:userID, :shares, :symbol, :price)\",","                                   userID=session[\"user_id\"], shares=int(shares), symbol=symbol, price=float(price))","        if not resultHistory:","            return apology(\"Problem making a purchase. Please try again later.\")","        # look for in and then update portfolios","        resultPortfoliosSearch = db.execute(","            \"SELECT shares FROM portfolios WHERE userID = :sessionid AND symbol = :symbol\", sessionid=int(session[\"user_id\"]), symbol=symbol)","        if resultPortfoliosSearch:","            # if you found it, update it","            resultPortfoliosUpdate = db.execute(","                \"UPDATE portfolios SET shares = shares + :shares WHERE userID = :sessionid AND symbol = :symbol\", sessionid=session[\"user_id\"], symbol=symbol, shares=shares)","            if not resultPortfoliosUpdate:","                return apology(\"Error resultPortfoliosUpdate\")","        else:","            resultPortfoliosAdd = db.execute(\"INSERT INTO portfolios (userID, shares, symbol) VALUES(:userID, :shares, :symbol)\",","                                             userID=session[\"user_id\"], shares=int(shares), symbol=symbol","                                             )","            if not resultPortfoliosAdd:","                return apology(\"Error resultPortfoliosAdd\")","        # and update users table cash","        resultUsers = db.execute(","            \"UPDATE users SET cash = cash - :cost WHERE id = :sessionid\", cost=cost, sessionid=session[\"user_id\"])","        if not resultUsers:","            return apology(\"Problem updating your wallet. Please try again later.\")","        # redirect to index","        return redirect(\"/\")","    else:","        return render_template(\"buy.html\")","","","@app.route(\"/history\")","@login_required","def history():","    \"\"\"Show portfolio of stocks\"\"\"","    # jinja values = transaction[{symbol, shares, price, date}]","","    resultsHistory = db.execute(","        \"SELECT * FROM history WHERE userID = :sessionid\", sessionid=session[\"user_id\"])","    transactions = []","    if resultsHistory:","        for transaction in resultsHistory:","            # db values = transactionID, userID, shares, symbol, price, datetime","            symbol = transaction[\"symbol\"]","            shares = transaction[\"shares\"]","            price = transaction[\"price\"]","            date = transaction[\"datetime\"]","            transactions.append({","                \"symbol\": symbol,","                \"shares\": shares,","                \"price\": usd(price),","                \"date\": date","            })","","    else:","        transactions.append({","            \"name\": \"-\",","            \"symbol\": \"-\",","            \"shares\": \"-\",","            \"price\": \"-\",","            \"value\": \"-\"","        })","","    return render_template(\"history.html\", transactions=transactions)","","","@app.route(\"/login\", methods=[\"GET\", \"POST\"])","def login():","    \"\"\"Log user in\"\"\"","","    # Forget any user_id","    session.clear()","","    # User reached route via POST (as by submitting a form via POST)","    if request.method == \"POST\":","","        # Ensure username was submitted","        if not request.form.get(\"username\"):","            return apology(\"must provide username\", 403)","","        # Ensure password was submitted","        elif not request.form.get(\"password\"):","            return apology(\"must provide password\", 403)","","        # Query database for username","        rows = db.execute(\"SELECT * FROM users WHERE username = :username\",","                          username=request.form.get(\"username\"))","","        # Ensure username exists and password is correct","        if len(rows) != 1 or not check_password_hash(rows[0][\"hash\"], request.form.get(\"password\")):","            return apology(\"invalid username and/or password\", 403)","","        # Remember which user has logged in","        session[\"user_id\"] = rows[0][\"id\"]","","        # Redirect user to home page","        return redirect(\"/\")","","    # User reached route via GET (as by clicking a link or via redirect)","    else:","        return render_template(\"login.html\")","","","@app.route(\"/logout\")","def logout():","    \"\"\"Log user out\"\"\"","","    # Forget any user_id","    session.clear()","","    # Redirect user to login form","    return redirect(\"/\")","","","@app.route(\"/quote\", methods=[\"GET\", \"POST\"])","@login_required","def quote():","    \"\"\"Get stock quote.\"\"\"","    if request.method == \"POST\":","        value = request.form.get(\"symbol\")","        if not value:","            return apology(\"Please enter a valid ticker\")","        quote = lookup(value)","        if not quote:","            return apology(\"Not a valid symbol\")","        return render_template(\"display.html\", ticker=quote[\"symbol\"], price=usd(int(quote[\"price\"])))","    else:","        return render_template(\"quote.html\")","","","@app.route(\"/register\", methods=[\"GET\", \"POST\"])","def register():","    \"\"\"Register user\"\"\"","    # clear session","    session.clear()","    # User reached route via POST (as by submitting a form via POST)","    if request.method == \"POST\":","        username = request.form.get(\"username\")","        password = request.form.get(\"password\")","        confirmation = request.form.get(\"confirmation\")","        # check form is correctly entered","        if not username:","            return apology(\"must create a username\")","        if not password:","            return apology(\"must create a password\")","        if not confirmation:","            return apology(\"must enter password again to confirm\")","        if not password == confirmation:","            return apology(\"password and password confirmation must be identical\")","        # encrypt and add","        result = db.execute(\"INSERT INTO users (username, hash) VALUES(:username, :hashedpassword)\",","                            username=username, hashedpassword=generate_password_hash(password))","        if not result:","            return apology(\"that username is already taken\")","        session[\"user_id\"] = username","        return redirect(\"/\")","    # User reached route via GET (as by clicking a link or via redirect)","    else:","        return render_template(\"register.html\")","","","@app.route(\"/sell\", methods=[\"GET\", \"POST\"])","@login_required","def sell():","    \"\"\"Sell shares of stock\"\"\"","    if request.method == \"POST\":","        # form names = symbol, shares","        symbol = request.form.get(\"symbol\")","        shares = request.form.get(\"shares\")","        if not RepresentsIntshares:","            return apology(\"You must enter a valid whole number of shares\")","        if not symbol or not shares or int(shares) <= 0:","            return apology(\"You must enter a valid symbol and shares\")","        quote = lookup(symbol)","        if not quote:","            return apology(\"Not a valid symbol\")","        price = quote[\"price\"]","        cost = float(price) * int(shares)","","        # look for in and then update portfolios","        resultPortfoliosSearch = db.execute(","            \"SELECT shares FROM portfolios WHERE userID = :sessionid AND symbol = :symbol\", sessionid=int(session[\"user_id\"]), symbol=symbol)","        if int(resultPortfoliosSearch[0][\"shares\"]) > int(shares):","            # if you have it and you have extra shares, update it","            resultPortfoliosUpdate = db.execute(\"UPDATE portfolios SET shares = shares - :shares WHERE userID = :sessionid AND symbol = :symbol\",","                                                sessionid=session[\"user_id\"], symbol=symbol, shares=int(shares))","            if not resultPortfoliosUpdate:","                return apology(\"You don't have enough shares of that stock\")","        elif resultPortfoliosSearch and resultPortfoliosSearch[0][\"shares\"] == int(shares):","            # if you have it and you have exactly the same number of shares, just delete it from portfolio","            resultPortfoliosUpdate = db.execute(","                \"DELETE FROM portfolios WHERE userID = :sessionid AND symbol = :symbol\", sessionid=session[\"user_id\"], symbol=symbol)","            if not resultPortfoliosUpdate:","                return apology(\"You don't own any shares of that stock\")","        else:","            return apology(\"You don't have enough shares of that stock\")","        # also insert it into history table","        resultHistory = db.execute(\"INSERT INTO history (userID, shares, symbol, price) VALUES(:userID, :shares, :symbol, :price)\",","                                   userID=session[\"user_id\"], shares=0 - int(shares), symbol=symbol, price=float(price))","        if not resultHistory:","            return apology(\"Problem making a purchase. Please try again later.\")","        # and update users table cash","        resultUsers = db.execute(","            \"UPDATE users SET cash = cash + :cost WHERE id = :sessionid\", cost=cost, sessionid=session[\"user_id\"])","        if not resultUsers:","            return apology(\"Problem updating your wallet. Please try again later.\")","        # redirect to index","        return redirect(\"/\")","    else:","        # get symbols","        resultSymbols = db.execute(","            \"SELECT symbol FROM portfolios WHERE userID = :sessionid\", sessionid=session[\"user_id\"])","        if not resultSymbols:","            return apology(\"You don't have any stocks to sell\")","        return render_template(\"sell.html\", symbols=resultSymbols)","","","@app.route(\"/account\", methods=[\"GET\", \"POST\"])","@login_required","def account():","    \"\"\"Allow user to delete their account\"\"\"","    if request.method == \"POST\":","        # Ensure password was submitted","        if not request.form.get(\"password\"):","            return apology(\"must provide password\", 403)","","        # Query database for username","        rows = db.execute(\"SELECT * FROM users WHERE id = :userID\",","                          userID=session[\"user_id\"])","","        # Ensure username exists and password is correct","        if len(rows) != 1 or not check_password_hash(rows[0][\"hash\"], request.form.get(\"password\")):","            return apology(\"invalid username and/or password\", 403)","","        # delete from users","        resultAccountDeleteU = db.execute(","            \"DELETE FROM users WHERE id = :sessionid\", sessionid=session[\"user_id\"])","        if not resultAccountDeleteU:","            return apology(\"Failed to delete account for whatever reason\")","        # delete from history","        resultAccountDeleteH = db.execute(","            \"DELETE FROM history WHERE userID = :sessionid\", sessionid=session[\"user_id\"])","        if not resultAccountDeleteH:","            return apology(\"Failed to delete account for whatever reason\")","        # delete from portfolios","        resultAccountDeleteP = db.execute(","            \"DELETE FROM portfolios WHERE userID = :sessionid\", sessionid=session[\"user_id\"])","        if not resultAccountDeleteP:","            return apology(\"Failed to delete account for whatever reason\")","","        session.clear()","        return redirect(\"/\")","    else:","        return render_template(\"account.html\")","","","def errorhandler(e):","    \"\"\"Handle error\"\"\"","    return apology(e.name, e.code)","","","# listen for errors","for code in default_exceptions:","    app.errorhandler(code)(errorhandler)",""]}],[{"start":{"row":282,"column":34},"end":{"row":282,"column":35},"action":"insert","lines":[")"],"id":3731}],[{"start":{"row":282,"column":28},"end":{"row":282,"column":29},"action":"insert","lines":["("],"id":3732}],[{"start":{"row":45,"column":14},"end":{"row":45,"column":15},"action":"insert","lines":[","],"id":3733}],[{"start":{"row":45,"column":15},"end":{"row":45,"column":16},"action":"insert","lines":[" "],"id":3734},{"start":{"row":45,"column":16},"end":{"row":45,"column":17},"action":"insert","lines":["a"]}],[{"start":{"row":45,"column":17},"end":{"row":45,"column":18},"action":"insert","lines":[" "],"id":3735},{"start":{"row":45,"column":18},"end":{"row":45,"column":19},"action":"insert","lines":["f"]},{"start":{"row":45,"column":19},"end":{"row":45,"column":20},"action":"insert","lines":["u"]},{"start":{"row":45,"column":20},"end":{"row":45,"column":21},"action":"insert","lines":["n"]},{"start":{"row":45,"column":21},"end":{"row":45,"column":22},"action":"insert","lines":["c"]},{"start":{"row":45,"column":22},"end":{"row":45,"column":23},"action":"insert","lines":["t"]},{"start":{"row":45,"column":23},"end":{"row":45,"column":24},"action":"insert","lines":["i"]},{"start":{"row":45,"column":24},"end":{"row":45,"column":25},"action":"insert","lines":["o"]},{"start":{"row":45,"column":25},"end":{"row":45,"column":26},"action":"insert","lines":["n"]}],[{"start":{"row":45,"column":26},"end":{"row":45,"column":27},"action":"insert","lines":[" "],"id":3736},{"start":{"row":45,"column":27},"end":{"row":45,"column":28},"action":"insert","lines":["t"]},{"start":{"row":45,"column":28},"end":{"row":45,"column":29},"action":"insert","lines":["a"]},{"start":{"row":45,"column":29},"end":{"row":45,"column":30},"action":"insert","lines":["k"]},{"start":{"row":45,"column":30},"end":{"row":45,"column":31},"action":"insert","lines":["e"]},{"start":{"row":45,"column":31},"end":{"row":45,"column":32},"action":"insert","lines":["n"]}],[{"start":{"row":45,"column":32},"end":{"row":45,"column":33},"action":"insert","lines":[" "],"id":3737},{"start":{"row":45,"column":33},"end":{"row":45,"column":34},"action":"insert","lines":["f"]},{"start":{"row":45,"column":34},"end":{"row":45,"column":35},"action":"insert","lines":["r"]},{"start":{"row":45,"column":35},"end":{"row":45,"column":36},"action":"insert","lines":["o"]},{"start":{"row":45,"column":36},"end":{"row":45,"column":37},"action":"insert","lines":["m"]}],[{"start":{"row":45,"column":37},"end":{"row":45,"column":38},"action":"insert","lines":[" "],"id":3738}],[{"start":{"row":45,"column":37},"end":{"row":45,"column":38},"action":"remove","lines":[" "],"id":3739}],[{"start":{"row":45,"column":33},"end":{"row":45,"column":37},"action":"remove","lines":["from"],"id":3740}],[{"start":{"row":45,"column":32},"end":{"row":45,"column":33},"action":"remove","lines":[" "],"id":3741}],[{"start":{"row":45,"column":27},"end":{"row":45,"column":32},"action":"remove","lines":["taken"],"id":3742}],[{"start":{"row":45,"column":27},"end":{"row":45,"column":28},"action":"insert","lines":["w"],"id":3743},{"start":{"row":45,"column":28},"end":{"row":45,"column":29},"action":"insert","lines":["r"]},{"start":{"row":45,"column":29},"end":{"row":45,"column":30},"action":"insert","lines":["i"]},{"start":{"row":45,"column":30},"end":{"row":45,"column":31},"action":"insert","lines":["t"]},{"start":{"row":45,"column":31},"end":{"row":45,"column":32},"action":"insert","lines":["t"]},{"start":{"row":45,"column":32},"end":{"row":45,"column":33},"action":"insert","lines":["e"]},{"start":{"row":45,"column":33},"end":{"row":45,"column":34},"action":"insert","lines":["n"]}],[{"start":{"row":45,"column":34},"end":{"row":45,"column":35},"action":"insert","lines":[" "],"id":3744},{"start":{"row":45,"column":35},"end":{"row":45,"column":36},"action":"insert","lines":["b"]},{"start":{"row":45,"column":36},"end":{"row":45,"column":37},"action":"insert","lines":["y"]}],[{"start":{"row":45,"column":37},"end":{"row":45,"column":38},"action":"insert","lines":[" "],"id":3745}],[{"start":{"row":45,"column":38},"end":{"row":45,"column":46},"action":"insert","lines":["Triptych"],"id":3746}],[{"start":{"row":45,"column":46},"end":{"row":45,"column":47},"action":"insert","lines":[" "],"id":3747},{"start":{"row":45,"column":47},"end":{"row":45,"column":48},"action":"insert","lines":["o"]},{"start":{"row":45,"column":48},"end":{"row":45,"column":49},"action":"insert","lines":["n"]}],[{"start":{"row":45,"column":49},"end":{"row":45,"column":50},"action":"insert","lines":[" "],"id":3748},{"start":{"row":45,"column":50},"end":{"row":45,"column":51},"action":"insert","lines":["s"]},{"start":{"row":45,"column":51},"end":{"row":45,"column":52},"action":"insert","lines":["t"]},{"start":{"row":45,"column":52},"end":{"row":45,"column":53},"action":"insert","lines":["a"]},{"start":{"row":45,"column":53},"end":{"row":45,"column":54},"action":"insert","lines":["c"]},{"start":{"row":45,"column":54},"end":{"row":45,"column":55},"action":"insert","lines":["k"]},{"start":{"row":45,"column":55},"end":{"row":45,"column":56},"action":"insert","lines":["o"]},{"start":{"row":45,"column":56},"end":{"row":45,"column":57},"action":"insert","lines":["v"]},{"start":{"row":45,"column":57},"end":{"row":45,"column":58},"action":"insert","lines":["e"]},{"start":{"row":45,"column":58},"end":{"row":45,"column":59},"action":"insert","lines":["r"]},{"start":{"row":45,"column":59},"end":{"row":45,"column":60},"action":"insert","lines":["f"]},{"start":{"row":45,"column":60},"end":{"row":45,"column":61},"action":"insert","lines":["l"]}],[{"start":{"row":45,"column":61},"end":{"row":45,"column":62},"action":"insert","lines":["o"],"id":3749},{"start":{"row":45,"column":62},"end":{"row":45,"column":63},"action":"insert","lines":["w"]}],[{"start":{"row":45,"column":63},"end":{"row":45,"column":64},"action":"insert","lines":[" "],"id":3750},{"start":{"row":45,"column":64},"end":{"row":45,"column":65},"action":"insert","lines":[":"]},{"start":{"row":45,"column":65},"end":{"row":45,"column":66},"action":"insert","lines":[")"]}],[{"start":{"row":74,"column":29},"end":{"row":74,"column":44},"action":"remove","lines":["stock[\"symbol\"]"],"id":3752},{"start":{"row":74,"column":29},"end":{"row":74,"column":30},"action":"insert","lines":["s"]},{"start":{"row":74,"column":30},"end":{"row":74,"column":31},"action":"insert","lines":["y"]},{"start":{"row":74,"column":31},"end":{"row":74,"column":32},"action":"insert","lines":["m"]},{"start":{"row":74,"column":32},"end":{"row":74,"column":33},"action":"insert","lines":["b"]},{"start":{"row":74,"column":33},"end":{"row":74,"column":34},"action":"insert","lines":["o"]},{"start":{"row":74,"column":34},"end":{"row":74,"column":35},"action":"insert","lines":["l"]}],[{"start":{"row":107,"column":20},"end":{"row":107,"column":24},"action":"remove","lines":["cash"],"id":3755},{"start":{"row":107,"column":20},"end":{"row":107,"column":21},"action":"insert","lines":["*"]}],[{"start":{"row":288,"column":46},"end":{"row":288,"column":47},"action":"insert","lines":[","],"id":3756}],[{"start":{"row":288,"column":47},"end":{"row":288,"column":48},"action":"insert","lines":[" "],"id":3757},{"start":{"row":288,"column":48},"end":{"row":288,"column":49},"action":"insert","lines":["o"]}],[{"start":{"row":288,"column":49},"end":{"row":288,"column":50},"action":"insert","lines":[" "],"id":3758}],[{"start":{"row":288,"column":49},"end":{"row":288,"column":50},"action":"remove","lines":[" "],"id":3759}],[{"start":{"row":288,"column":49},"end":{"row":288,"column":50},"action":"insert","lines":["r"],"id":3760}],[{"start":{"row":288,"column":50},"end":{"row":288,"column":51},"action":"insert","lines":[" "],"id":3761},{"start":{"row":288,"column":51},"end":{"row":288,"column":52},"action":"insert","lines":["A"]},{"start":{"row":288,"column":52},"end":{"row":288,"column":53},"action":"insert","lines":["P"]},{"start":{"row":288,"column":53},"end":{"row":288,"column":54},"action":"insert","lines":["I"]}],[{"start":{"row":288,"column":54},"end":{"row":288,"column":55},"action":"insert","lines":[" "],"id":3762},{"start":{"row":288,"column":55},"end":{"row":288,"column":56},"action":"insert","lines":["n"]},{"start":{"row":288,"column":56},"end":{"row":288,"column":57},"action":"insert","lines":["o"]},{"start":{"row":288,"column":57},"end":{"row":288,"column":58},"action":"insert","lines":["t"]}],[{"start":{"row":288,"column":58},"end":{"row":288,"column":59},"action":"insert","lines":[" "],"id":3763},{"start":{"row":288,"column":59},"end":{"row":288,"column":60},"action":"insert","lines":["w"]},{"start":{"row":288,"column":60},"end":{"row":288,"column":61},"action":"insert","lines":["o"]},{"start":{"row":288,"column":61},"end":{"row":288,"column":62},"action":"insert","lines":["r"]},{"start":{"row":288,"column":62},"end":{"row":288,"column":63},"action":"insert","lines":["k"]},{"start":{"row":288,"column":63},"end":{"row":288,"column":64},"action":"insert","lines":["i"]},{"start":{"row":288,"column":64},"end":{"row":288,"column":65},"action":"insert","lines":["n"]},{"start":{"row":288,"column":65},"end":{"row":288,"column":66},"action":"insert","lines":["g"]}]]},"ace":{"folds":[],"scrolltop":5560,"scrollleft":0,"selection":{"start":{"row":288,"column":66},"end":{"row":288,"column":66},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":true,"wrapToView":true},"firstLineState":{"row":269,"state":"start","mode":"ace/mode/python"}},"timestamp":1532376074175,"hash":"ade072e02e6c556e1f3a1cb2b1a6261a0ff41701"}